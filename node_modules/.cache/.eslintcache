[{"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\index.js":"1","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\App.js":"2","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\reportWebVitals.js":"3","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataClean.js":"4","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\progressClean.js":"5"},{"size":699,"mtime":1620163109941,"results":"6","hashOfConfig":"7"},{"size":24597,"mtime":1622357711217,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":6641,"mtime":1621299718060,"results":"10","hashOfConfig":"7"},{"size":2139,"mtime":1622231803499,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ryvpfz",{"filePath":"15","messages":"16","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\index.js",[],["25","26"],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\App.js",["27","28","29","30","31","32","33","34","35","36","37","38","39","40","41"],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\reportWebVitals.js",[],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataClean.js",["42","43","44","45","46"],"// import houses from './dataGrab';\r\nimport finalProgressFetch from './progressClean'\r\nimport fetch from 'node-fetch'\r\n// import axios from 'axios';\r\nconst axios = require('axios')\r\n// import { request } from 'http';\r\n// const dirtyProgress = require(\"./progressClean\")\r\n// const newDirtyProgress = dirtyProgress\r\n// let houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nconst https = require ('https');\r\nconst request = require('request');\r\n\r\n\r\n// let houses;\r\n// let url = \"https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json\"\r\n// let options = {\r\n//     json: true,\r\n// };\r\n\r\n\r\n// https.get(url,(res) => {\r\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888')\r\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n//     res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n//     let body = \"\";\r\n\r\n//     res.on(\"data\", (chunk) => {\r\n//         body += chunk;\r\n//     });\r\n\r\n//     res.on(\"end\", () => {\r\n//         try {\r\n//             houses = JSON.parse(body);\r\n//             console.log(houses)\r\n//         } catch (error) {\r\n//             console.error(error.message);\r\n//         };\r\n//     });\r\n\r\n// }).on(\"error\", (error) => {\r\n//     console.error(error.message)\r\n// });\r\n\r\n\r\n// request(url, options, (error, res, body) => {\r\n//     if (error) {\r\n//         return  console.log(error)\r\n//     };\r\n\r\n//     if (!error && res.statusCode === 200) {\r\n//         console.log(body)\r\n//         houses = body\r\n//     };\r\n// });\r\n\r\n\r\n\r\n\r\n// function callback(error, response, body) {\r\n//     if (!error && response.statusCode === 200) {\r\n//         const info = JSON.parse(body);\r\n//         console.log(info)\r\n//     }\r\n// }\r\n\r\n// request(options, callback);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n        \r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n        \r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n    if (element !== null) {\r\n        let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n        let month = newDate.getMonth()+1\r\n        let day = newDate.getDate()\r\n        let year = newDate.getFullYear()\r\n        \r\n        \r\n        return `${month}/${day}/${year}`\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\nconst sortDate = (array) => {\r\n    homes = array.sort((a, b) => b.date - a.date)\r\n}\r\n\r\n\r\nlet homes = [];\r\nlet houseObject = {};\r\nlet dirtyProgress = [];\r\nlet infinityHomes = [];\r\n\r\nconst fetchHouses = async () =>\r\n    await (await fetch('/.netlify/functions/puller')).json();\r\n\r\n// const fetchInfinityHouses = async () =>\r\n//     await (await fetch('./')).json()\r\n\r\nconst fetchProgress = async () => {\r\n    let oof =  finalProgressFetch()\r\n    return oof\r\n}\r\n\r\nasync function finalFetch () {\r\n\r\n    dirtyProgress = await (await finalProgressFetch())\r\n    // infinityHomes = await (await fetchInfinityHouses())\r\n    fetchHouses().then((houses) => {\r\n\r\n    let firstRow = houses[0];\r\n    let keys = createKeyArray(firstRow);\r\n\r\n    objectMap(keys, houses);\r\n    idAdd(homes)\r\n\r\n    for (var i = homes.length - 1; i >= 0; i--) {\r\n        if (homes[i].streetAddress === null) {\r\n        homes.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < homes.length; i++) {\r\n        const element = homes[i];\r\n        \r\n        element.id = idAdd(element)\r\n        \r\n        element.created = formatDate(element.created)\r\n        element.actualStart = formatDate(element.actualStart)\r\n        element.permit = formatDate(element.permit)\r\n        element.citySub = formatDate(element.citySub)\r\n        element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n        element.utilitiesSent = formatDate(element.utilitiesSent)\r\n        \r\n        element.ccRs = toBoolean(element.ccRs)\r\n        element.floorJoists = toBoolean(element.floorJoists)\r\n        element.orderLumber = toBoolean(element.orderLumber)\r\n        element.orderMaterial = toBoolean(element.orderMaterial)\r\n        element.orderOsb = toBoolean(element.orderOsb)\r\n        element.planReview = toBoolean(element.planReview)\r\n        element.selections = toBoolean(element.selections)\r\n        element.trusses = toBoolean(element.trusses)\r\n        element.jobColor = toHex(element.jobColor)\r\n        \r\n        element.progress = progressAppend(element.jobName, dirtyProgress)\r\n    }\r\n})\r\n\r\n//     finalProgressFetch().then((dirtyProgress) => {\r\n//         console.log(dirtyProgress)\r\n//         for (let i = 0; i < homes.length; i++) {\r\n//             const element = homes[i];\r\n            \r\n//             element.progress = progressAppend(element.jobName, dirtyProgress)\r\n//         }\r\n// })\r\n\r\n    console.log(fetchProgress())\r\n\r\n    return homes\r\n}\r\n\r\n// finalFetch()\r\n\r\n\r\nexport default finalFetch;\r\n\r\n\r\n\r\n\r\n\r\n// console.log(JSON.stringify(homes));\r\n","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\progressClean.js",["47","48"],"// const houses_progress = require(\"./progress.json\");\r\nimport finalFetch from './dataClean'\r\nconst { default: fetch } = require(\"node-fetch\");\r\n\r\n\r\n\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\nlet lel;\r\nlet dirtyProgress;\r\n\r\n// Parses the json data and save it to a variable\r\nconst fetchProgress = async () => {\r\n    lel = await (await fetch('/.netlify/functions/progressPuller')).json()\r\n    // lel = JSON.parse(houses_progress)\r\n    return lel\r\n}\r\n\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\nlet finalArray = []\r\nlet newArray = []\r\nlet newNewArray = []\r\n\r\nasync function finalProgressFetch() {\r\n    fetchProgress().then((lel) => {\r\n        // let progressObject = {}\r\n\r\n\r\n        // Set newArray to list round numbers of the completion\r\n        for (let i = 0; i < lel.jobProgress.length; i++) {\r\n            const element = lel.jobProgress[i];\r\n            newArray.push(Math.round(element))\r\n        }\r\n\r\n        // Set newNewArray to list all the houses\r\n        for (let i = 0; i < lel.jobName.length; i++) {\r\n            const element = lel.jobName[i];\r\n            newNewArray.push(element)\r\n        }\r\n\r\n        // Maps the array of houses to the array of completion values\r\n        // Creates an array of objects: {house: percentage}\r\n        const objMap = (keyArray, valueArray, outArray) => {\r\n            let progressObject = {}\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                progressObject = {}\r\n                const key = keyArray[i];\r\n                const value = valueArray[i];\r\n\r\n                if (globalRegex.test(key)) {\r\n                    continue;\r\n                }\r\n\r\n                progressObject[key] = value\r\n                \r\n                outArray.push(progressObject)\r\n            }\r\n        }\r\n\r\n        objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n        // console.log(finalArray)\r\n        // console.log(newArray.length)\r\n        // console.log(newNewArray.length)\r\n    })\r\n    return finalArray\r\n}\r\n\r\n\r\n\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":1,"column":38,"nodeType":"55","messageId":"56","endLine":1,"endColumn":49},{"ruleId":"53","severity":1,"message":"57","line":9,"column":8,"nodeType":"55","messageId":"56","endLine":9,"endColumn":13},{"ruleId":"53","severity":1,"message":"58","line":10,"column":8,"nodeType":"55","messageId":"56","endLine":10,"endColumn":13},{"ruleId":"53","severity":1,"message":"59","line":11,"column":8,"nodeType":"55","messageId":"56","endLine":11,"endColumn":16},{"ruleId":"53","severity":1,"message":"60","line":12,"column":10,"nodeType":"55","messageId":"56","endLine":12,"endColumn":15},{"ruleId":"53","severity":1,"message":"61","line":12,"column":17,"nodeType":"55","messageId":"56","endLine":12,"endColumn":23},{"ruleId":"53","severity":1,"message":"62","line":12,"column":25,"nodeType":"55","messageId":"56","endLine":12,"endColumn":35},{"ruleId":"53","severity":1,"message":"63","line":12,"column":37,"nodeType":"55","messageId":"56","endLine":12,"endColumn":41},{"ruleId":"53","severity":1,"message":"64","line":41,"column":7,"nodeType":"55","messageId":"56","endLine":41,"endColumn":14},{"ruleId":"53","severity":1,"message":"65","line":177,"column":9,"nodeType":"55","messageId":"56","endLine":177,"endColumn":23},{"ruleId":"53","severity":1,"message":"66","line":277,"column":10,"nodeType":"55","messageId":"56","endLine":277,"endColumn":20},{"ruleId":"53","severity":1,"message":"67","line":277,"column":22,"nodeType":"55","messageId":"56","endLine":277,"endColumn":35},{"ruleId":"53","severity":1,"message":"68","line":471,"column":10,"nodeType":"55","messageId":"56","endLine":471,"endColumn":18},{"ruleId":"53","severity":1,"message":"69","line":543,"column":9,"nodeType":"55","messageId":"56","endLine":543,"endColumn":16},{"ruleId":"53","severity":1,"message":"70","line":558,"column":9,"nodeType":"55","messageId":"56","endLine":558,"endColumn":33},{"ruleId":"53","severity":1,"message":"71","line":5,"column":7,"nodeType":"55","messageId":"56","endLine":5,"endColumn":12},{"ruleId":"53","severity":1,"message":"72","line":11,"column":7,"nodeType":"55","messageId":"56","endLine":11,"endColumn":12},{"ruleId":"53","severity":1,"message":"73","line":12,"column":7,"nodeType":"55","messageId":"56","endLine":12,"endColumn":14},{"ruleId":"53","severity":1,"message":"74","line":169,"column":7,"nodeType":"55","messageId":"56","endLine":169,"endColumn":15},{"ruleId":"53","severity":1,"message":"75","line":177,"column":5,"nodeType":"55","messageId":"56","endLine":177,"endColumn":18},{"ruleId":"53","severity":1,"message":"76","line":2,"column":8,"nodeType":"55","messageId":"56","endLine":2,"endColumn":18},{"ruleId":"53","severity":1,"message":"77","line":11,"column":5,"nodeType":"55","messageId":"56","endLine":11,"endColumn":18},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","'fetch' is defined but never used.","'DataGrid' is defined but never used.","'Table' is defined but never used.","'Column' is defined but never used.","'HeaderCell' is defined but never used.","'Cell' is defined but never used.","'updater' is assigned a value but never used.","'permitNotifier' is assigned a value but never used.","'cardUpdate' is assigned a value but never used.","'setCardUpdate' is assigned a value but never used.","'setColor' is defined but never used.","'columns' is assigned a value but never used.","'SUBDIVISION_FILTER_NAMES' is assigned a value but never used.","'axios' is assigned a value but never used.","'https' is assigned a value but never used.","'request' is assigned a value but never used.","'sortDate' is assigned a value but never used.","'infinityHomes' is assigned a value but never used.","'finalFetch' is defined but never used.","'dirtyProgress' is defined but never used.","no-global-assign","no-unsafe-negation"]