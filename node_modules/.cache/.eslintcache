[{"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\index.js":"1","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\App.js":"2","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\reportWebVitals.js":"3","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataClean.js":"4","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\progressClean.js":"5","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataGrab.js":"6","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\finalDataClean.js":"7"},{"size":699,"mtime":1620163109941,"results":"8","hashOfConfig":"9"},{"size":17122,"mtime":1620419221367,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":5839,"mtime":1620425426388,"results":"12","hashOfConfig":"9"},{"size":2282,"mtime":1620419709371,"results":"13","hashOfConfig":"9"},{"size":456,"mtime":1620090426009,"results":"14","hashOfConfig":"9"},{"size":0,"mtime":1620419209678,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"ryvpfz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\index.js",[],["33","34"],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\App.js",["35","36","37","38","39","40","41"],"import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\"\nimport './App.css';\n// import homes from './dataClean';\n// import houseData from './dataClean'\nimport finalFetch from './dataClean';\n// import finalFetch from './dataClean';\n// let homes = await import ('./dataClean.js');\nimport axios from 'axios'\nimport fetch from 'node-fetch';\n\n\n// let {PythonShell} = require('python-shell');\n\n\n// let options = {\n//   scriptPath: 'C:/Users/daniel.lavrentiev/Dropbox/Screen Project/Scraper',\n//   pythonOptions: ['-u']\n// }\n\n\n// function handleRefresh () {\n//   PythonShell.run('test_cleaner.py', options, function (err, results) {\n//     if (err) throw err;\n//     console.log('results: &j', results);\n//   });\n// }\n\n\n// function ResetButton (props) {\n//   return (\n//     <button className='refresh'>Refresh</button>\n//   )\n// }\n\n\n\nconst updater = () => {\n\n}\n\n\n\n\nfunction TitleSection(props) {\n\n  const hex = props.color\n\n  return (\n    <motion.div className='title-section'>\n      <motion.div className='color-square' style={{ backgroundColor: hex }} ></motion.div>\n      <motion.div className='title'>\n        {props.streetAddress}\n      </motion.div>\n    </motion.div>\n  );\n}\n\nfunction PillSection(props) { // This code looks like shit, but don't screw with it\n  const pillList = [props.company,\n  props.modelNumber,\n  props.subdivisionAndPhase,\n  props.lotNumber,\n  props.city,\n  props.projectManager,\n  props.listingAgent,\n  props.jobType]\n  const ref = useRef(); // Don't not use useRef, using literally anything else will break this component\n  const [isOverflowed, setIsOverflowed] = useState(false);\n  const [testList, setTestList] = useState(pillList);\n  let filtered = testList.filter((pill, index) => index < testList.length - 1);\n\n\n\n  useEffect(() => {\n    if (ref.current.clientWidth < ref.current.scrollWidth) {\n      setIsOverflowed(true)\n    } else {\n      setIsOverflowed(false)\n    }\n  }, [ref, isOverflowed])\n\n  useEffect(() =>\n    !isOverflowed ? handleFilter : setIsOverflowed(false),\n    [isOverflowed]// I have no idea why this works but don't touch it\n  )\n\n\n  const handleOverflowRender = (list) => {\n    let overFlowVal = pillList.length - list.length\n    if (list.length < pillList.length) {\n      return <motion.li className='infopill-expand'>+{overFlowVal}</motion.li>\n    } else {\n    }\n  }\n\n  const handleFilter = () => {\n    let filtered = testList.filter((pill, index) => index < testList.length - 1);\n    setTestList(filtered)\n  }\n\n\n  return (\n    <motion.ul ref={ref} className={props.expandClass}  >\n      {testList.map((pill, i) =>\n        <motion.li key={i} className='infopill'>{pill}</motion.li>\n      )}\n      {handleOverflowRender(testList)}\n    </motion.ul>\n  )\n}\n\n\n\nfunction IndicatorGroup(props) {\n\n  function assignColor(indicatorVal) {\n    if (indicatorVal) {\n      return 'rgb(122, 209, 106)'\n    } else {\n      return 'rgb(214, 79, 79)'\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id={props.widthType}>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.selections) }}>\n        Selections\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.materials) }} >\n        Materials\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.osb) }} >\n        OSB\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.planReview) }} >\n        Fee\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.floorJoists) }} >\n        Joists\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.ccrs) }} >\n        CCR\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.lumber) }} >\n        Lumber\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.trusses) }} >\n        Trusses\n      </motion.div>\n    </motion.div>\n  );\n}\n\nfunction PermitGroup(props) {\n\n  function yearChopper(date) {\n    if (date !== null && date !== undefined) {\n      let chopped = (date.slice(0, -5))\n      // let choppedStr = chopped.toString()\n      return chopped\n    } else {\n      return 'null'\n    }\n  }\n\n  const utilNotifier = (value) => {\n    if (value !== null && value !== undefined) {\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\n    } else {\n      return <motion.div className='relational-notification'>!</motion.div>\n    }\n  }\n  const permitNotifier = (value) => {\n    if (value !== null && value !== undefined) {\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\n    } else {\n      return <motion.div className='relational-notification' style={{ backgroundColor: 'rgb(235,190,65)' }}>-</motion.div>\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id='permit-group'>\n      <motion.div className='relational-container ' style={{ width: '45%' }}>\n        <motion.div className='relational-key'>City</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        <motion.div className='relational-value'>{yearChopper(props.citySub)}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container ' style={{ width: '55%' }}>\n        <motion.div className='relational-key'>Utils sent</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        {utilNotifier(props.utilitiesSent)}\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '45%' }}>\n        <motion.div className='relational-key'>Permit</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        <motion.div className='relational-value'>{yearChopper(props.permit)}</motion.div>\n\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '55%' }}>\n        <motion.div className='relational-key'>Utils payed</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        {utilNotifier(props.utilitiesPaid)}\n      </motion.div>\n    </motion.div>\n  )\n}\n\n\nfunction SqftGroup(props) {\n  const sfAppender = (value) => {\n    return `${value} SF`\n  }\n\n  return (\n    <motion.div className='grouper' id='sf-group' >\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Garage</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{sfAppender(props.garage)}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Covered</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{sfAppender(props.covered)}</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\n\nfunction LotGroup(props) {\n\n  const parcelChecker = (value) => {\n    if (!value) {\n      return 'null'\n    } else {\n      return value\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id='lot-group' >\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Lot Size</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{props.lotSize}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Parcel</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{parcelChecker(props.parcel)}</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\nfunction ProgressGroup(props) {\n  return (\n    <motion.div className='grouper' id='progress-group'>\n      <motion.div className='relational-container' style={{ width: '100%' }}>\n        <motion.div className='relational-key' >Schedule</motion.div>\n        <motion.progress max='100' value={props.progress} ></motion.progress>\n        <motion.div className='progress-text' >{props.progress}%</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\nfunction CardList({ setIndex, items, setHomes }) {\n\n\n  // async function handleChange() {\n  //   setTest(true)\n  //   if (test) {\n  //     setItems(await testFetchFunc())\n  //     // console.log(houseData)\n  //   } else {\n  //     setItems([])\n  //   }\n  // }\n\n\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     const req = await finalFetch()\n  //     setHomes(req)\n  //   }\n  //   fetchData();\n  // }, [setHomes])\n\n\n\n\n  return (\n    <ul className='cards-container'>\n      {items.map((contentItem, i) => (\n        contentItem.streetAddress ?\n          <motion.li layout\n            className='card'\n            key={i}\n            onClick={() => setIndex(i)}\n            layoutId={contentItem.id}\n          >\n\n            <motion.div layout layoutId={`${contentItem.id}head`} className='head'>\n              <TitleSection streetAddress={contentItem.streetAddress} color={contentItem.jobColor} />\n              <PillSection expandClass='pill-container' modelNumber={contentItem.modelNumber} subdivisionAndPhase={contentItem.subdivisionAndPhase} lotNumber={contentItem.lotNumber} city={contentItem.city} projectManager={contentItem.projectManager} listingAgent={contentItem.listingAgent} jobType={contentItem.jobType} company={contentItem.company} />\n            </motion.div>\n\n\n            <motion.div className='body' layout layoutId={`${contentItem.id}body`} >\n              <IndicatorGroup widthType='indicator-group' ccrs={contentItem.ccRs} floorJoists={contentItem.floorJoists} lumber={contentItem.orderLumber} materials={contentItem.orderMaterial} osb={contentItem.orderOsb} planReview={contentItem.planReview} selections={contentItem.selections} trusses={contentItem.trusses} />\n              <PermitGroup permit={contentItem.permit} utilitiesPaid={contentItem.utilitiesPaid} utilitiesSent={contentItem.utilitiesSent} citySub={contentItem.citySub} />\n            </motion.div>\n          </motion.li> : console.log('')\n      ))}\n    </ul>\n  )\n}\n\nfunction ExpandedCard(props) {\n  return (\n    <div className='cards-container-unfolded' onClick={props.onClick}>\n      <motion.div layout\n        layoutId={props.card.id}\n        className='card-expanded'\n      >\n\n        <motion.div layout layoutId={`${props.card.id}head`} className='head'>\n          <TitleSection streetAddress={props.card.streetAddress} color={props.card.jobColor} />\n          <PillSection expandClass='pill-container-expanded' modelNumber={props.card.modelNumber} subdivisionAndPhase={props.card.subdivisionAndPhase} lotNumber={props.card.lotNumber} city={props.card.city} projectManager={props.card.projectManager} listingAgent={props.card.listingAgent} jobType={props.card.jobType} company={props.card.company} />\n        </motion.div>\n\n        <motion.div layout layoutId={`${props.card.id}body`} className='body' style={{ flexWrap: 'wrap', alignContent: 'flex-start' }}>\n          <IndicatorGroup widthType='indicator-group-expanded' ccrs={props.card.ccRs} floorJoists={props.card.floorJoists} lumber={props.card.orderLumber} materials={props.card.orderMaterial} osb={props.card.orderOsb} planReview={props.card.planReview} selections={props.card.selections} trusses={props.card.trusses} />\n          <ProgressGroup progress={props.card.progress} />\n          <PermitGroup permit={props.card.permit} utilitiesPaid={props.card.utilitiesPaid} utilitiesSent={props.card.utilitiesSent} citySub={props.card.citySub} />\n          <SqftGroup garage={props.card.garageSf} covered={props.card.coveredAreaSf} />\n          <LotGroup lotSize={'null'} parcel={props.card.parcelNumber} />\n        </motion.div>\n\n      </motion.div>\n    </div>\n  )\n}\n\n\n\n\nfunction TestButton({ fetchData, anotherVal }) {\n\n\n  const [test, setTest] = useState(false);\n  const [testVal, setTestVal] = useState(\"This is rand test\")\n\n\n\n  async function handleChange() {\n    setTest(!test)\n    if (test) {\n      setTestVal(await testFunc())\n      // console.log(houseData)\n    } else {\n      setTestVal(\"This is rand test\")\n    }\n  }\n\n  return (\n    <div>\n      <button className='test-button' onClick={handleChange}>This is a test</button>\n      <p style={{ color: \"white\" }}>{testVal}</p>\n      <p></p>\n    </div>\n\n  );\n}\n\nconst testFunc = async () => {\n  const req = await fetch(\"/.netlify/functions/puller\", {\n    method: 'POST',\n    body: JSON.stringify({ url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json' })\n  })\n  const res = await req.text()\n  return res\n}\n\n\n\n\n\nfunction NavFilter() {\n\n\n\n  return (\n    <div className=\"filter-container\">\n      <ul className=\"filter-list\">\n        <div className=\"nav-row-title\">Filter:</div>\n        <li className=\"filter-item\">Company</li>\n        <li className=\"filter-item\">Model number</li>\n        <li className=\"filter-item\">Subdivision</li>\n        <li className=\"filter-item\">City</li>\n        <li className=\"filter-item\">Super</li>\n        <li className=\"filter-item\">Realtor</li>\n        <li className=\"filter-item\">Sale</li>\n        <li className=\"filter-item\">Todos</li>\n        <li className=\"filter-item\">Sub to city</li>\n        <li className=\"filter-item\">Permit</li>\n        <li className=\"filter-item\">Utils sent</li>\n        <li className=\"filter-item\">Utils paid</li>\n        <li className=\"filter-item\">Progress</li>\n      </ul>\n    </div>\n\n    );\n}\n\n\nfunction NavBar({ handleForce }) {\n  const [expanded, setExpanded] = useState(false);\n\n  const handleClick = () => {\n    setExpanded(!expanded)\n  }\n\n  const heightChanger = () => {\n    if (expanded) {\n      return 'nav-unfolded'\n    }\n  }\n\n  const classNames = 'navbar ' + heightChanger()\n\n  return (<nav className={classNames}>\n    <h2 className=\"nav-title\">Test header</h2>\n    <ul className=\"nav-container\">\n      <li className=\"navbar-item\" onClick={handleClick}>\n        Expand bar\n          </li>\n      <li className=\"navbar-item\" onClick={handleForce}>\n        Refresh screen\n          </li>\n      <li className=\"navbar-item\">\n        Move to another page\n          </li>\n    </ul>\n    <div className=\"break\"></div>\n    { expanded ? <NavFilter></NavFilter> : null}\n\n  </nav>);\n}\n\n\nfunction App() {\n\n  const [index, setIndex] = useState(false);\n  const [homes, setHomes] = useState([]);\n  const [forceState, setForceState] = useState(false)\n\n  const fetchData = async () => {\n    const results = await axios.get(\"/.netlify/functions/hello\")\n    let formResults = JSON.parse(results.data.message)\n    return formResults\n\n  }\n\n  // const fetchHouses = async () => {\n  //   const houseResults = await axios.get(\"/.netlify/functions/puller\")\n  //   let newHouseResults = JSON.stringify(houseResults)\n  //   console.log(newHouseResults)\n  // }\n\n  // useEffect(() => {\n  //   fetchHouses()\n  // }, [])\n\n  // useEffect(() => {\n  //   async function grabData() {\n  //     const json = await finalFetch()\n  //     console.log(await finalFetch())\n  //     setHomes(json)\n  //   }\n  //   grabData();\n  // }, [setHomes]);\n\n\n\n  // useEffect(() => {\n  //   finalFetch()\n  //     .then((houseData) => {\n  //       setHomes(houseData)\n  //       console.log(houseData)\n  //     })\n  // }, [setHomes]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const req = await finalFetch()\n      setHomes(req)\n    }\n    fetchData();\n  }, [setHomes])\n\n\n  function handleForce() {\n    setForceState(!forceState)\n  }\n\n\n\n  // setTimeout(setHomes(finalFetch), 3000)\n\n\n  return (\n    <AnimateSharedLayout type=\"crossfade\">\n      <NavBar handleForce={handleForce}></NavBar>\n      {/* <TestButton fetchData={fetchData} anotherVal={homes}></TestButton> */}\n      {/* <button onClick={handleForce}></button> */}\n      {homes.length > 0 ? <CardList items={homes} setHomes={setHomes} setIndex={setIndex} /> : setTimeout(() => handleForce(), 1000)}\n      <AnimatePresence>\n        {index !== false && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            key='modal'\n            className='modal'\n            onClick={() => setIndex(false)}\n          >\n          </motion.div>\n        )}\n\n        {index !== false && (\n          <ExpandedCard\n            key='expandedCard'\n            index={index}\n            card={homes[index]}\n            setIndex={setIndex}\n            onClick={() => setIndex(false)}\n          >\n          </ExpandedCard>\n        )}\n      </AnimatePresence>\n    </AnimateSharedLayout>\n\n  );\n}\n\n\n// const content = ['this is a test', 'this is another test', 'another testing thing', 'yet another testing thing', 'Lorem enim proident adipisicing sunt aute esse qui aliqua est tempor minim elit exercitation incididunt.', 'lorem12Sit sint excepteur in sint dolor mollit duis ea magna culpa.'];\n\nexport default App;\n","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\reportWebVitals.js",[],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataClean.js",["42","43","44","45","46"],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\progressClean.js",["47"],"// const houses_progress = require(\"./progress.json\");\r\nimport finalFetch from './dataClean'\r\nconst { default: fetch } = require(\"node-fetch\");\r\n\r\n\r\n\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\nlet lel;\r\nlet dirtyProgress;\r\n\r\n// Parses the json data and save it to a variable\r\nconst fetchProgress = async () => {\r\n    let houses_progress = await (await fetch('/.netlify/functions/progressPuller')).json()\r\n    lel = JSON.parse(houses_progress.data.chartData)\r\n    return lel\r\n}\r\n\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\n\r\nasync function finalProgressFetch() {\r\n    fetchProgress().then((lel) => {\r\n        // let progressObject = {}\r\n        let finalArray = []\r\n        let newArray = []\r\n        let newNewArray = []\r\n\r\n\r\n        // Set newArray to list round numbers of the completion\r\n        for (let i = 0; i < lel.series[0].data.length; i++) {\r\n            const element = lel.series[0].data[i].y;\r\n            newArray.push(Math.round(element))\r\n        }\r\n\r\n        // Set newNewArray to list all the houses\r\n        for (let i = 0; i < lel.categories.length; i++) {\r\n            const element = lel.categories[i];\r\n            newNewArray.push(element)\r\n        }\r\n\r\n        // Maps the array of houses to the array of completion values\r\n        // Creates an array of objects: {house: percentage}\r\n        const objMap = (keyArray, valueArray, outArray) => {\r\n            let progressObject = {}\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                progressObject = {}\r\n                const key = keyArray[i];\r\n                const value = valueArray[i];\r\n\r\n                if (globalRegex.test(key)) {\r\n                    continue;\r\n                }\r\n\r\n                progressObject[key] = value\r\n                \r\n                outArray.push(progressObject)\r\n            }\r\n        }\r\n\r\n        objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n        // console.log(finalArray)\r\n        // console.log(newArray.length)\r\n        // console.log(newNewArray.length)\r\n\r\n        dirtyProgress = finalArray\r\n        console.log(dirtyProgress)\r\n    })\r\n    return dirtyProgress\r\n}\r\n\r\n\r\n\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n","C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\dataGrab.js",["48","49"],"C:\\Users\\daniel.lavrentiev\\Desktop\\screen-react-test\\screen\\src\\finalDataClean.js",["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":38,"nodeType":"58","messageId":"59","endLine":1,"endColumn":49},{"ruleId":"56","severity":1,"message":"60","line":38,"column":7,"nodeType":"58","messageId":"59","endLine":38,"endColumn":14},{"ruleId":"56","severity":1,"message":"61","line":71,"column":7,"nodeType":"58","messageId":"59","endLine":71,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":85,"column":5,"nodeType":"64","endLine":85,"endColumn":19,"suggestions":"65"},{"ruleId":"56","severity":1,"message":"66","line":174,"column":9,"nodeType":"58","messageId":"59","endLine":174,"endColumn":23},{"ruleId":"56","severity":1,"message":"67","line":351,"column":10,"nodeType":"58","messageId":"59","endLine":351,"endColumn":20},{"ruleId":"56","severity":1,"message":"68","line":461,"column":9,"nodeType":"58","messageId":"59","endLine":461,"endColumn":18},{"ruleId":"56","severity":1,"message":"69","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":26},{"ruleId":"56","severity":1,"message":"70","line":5,"column":7,"nodeType":"58","messageId":"59","endLine":5,"endColumn":12},{"ruleId":"56","severity":1,"message":"71","line":11,"column":7,"nodeType":"58","messageId":"59","endLine":11,"endColumn":12},{"ruleId":"56","severity":1,"message":"72","line":12,"column":7,"nodeType":"58","messageId":"59","endLine":12,"endColumn":14},{"ruleId":"56","severity":1,"message":"73","line":159,"column":7,"nodeType":"58","messageId":"59","endLine":159,"endColumn":21},{"ruleId":"56","severity":1,"message":"74","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":18},{"ruleId":"56","severity":1,"message":"75","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"56","severity":1,"message":"76","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":13},{"ruleId":"56","severity":1,"message":"75","line":2,"column":8,"nodeType":"58","messageId":"59","endLine":2,"endColumn":13},{"ruleId":"56","severity":1,"message":"76","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":13},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'updater' is assigned a value but never used.","'filtered' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleFilter'. Either include it or remove the dependency array.","ArrayExpression",["79"],"'permitNotifier' is assigned a value but never used.","'TestButton' is defined but never used.","'fetchData' is assigned a value but never used.","'finalProgressFetch' is defined but never used.","'axios' is assigned a value but never used.","'https' is assigned a value but never used.","'request' is assigned a value but never used.","'progressAppend' is assigned a value but never used.","'finalFetch' is defined but never used.","'axios' is defined but never used.","'fetch' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [handleFilter, isOverflowed]",{"range":"82","text":"83"},[2100,2114],"[handleFilter, isOverflowed]"]