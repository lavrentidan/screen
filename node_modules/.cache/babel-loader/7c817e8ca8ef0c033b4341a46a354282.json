{"ast":null,"code":"import axios from 'axios';\nimport fetch from 'node-fetch'; // import houses from './dataGrab';\n\nconst dirtyProgress = require(\"./progressClean\");\n\nconst newDirtyProgress = dirtyProgress; // let houses = require(\"./houses.json\");\n\nconst {\n  v4: uuidv4\n} = require(\"uuid\");\n\nlet homes = [];\nlet houses;\n\nconst testFunc = async () => {\n  const req = await fetch(\"/.netlify/functions/puller\", {\n    method: 'POST',\n    body: JSON.stringify({\n      url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json'\n    })\n  });\n  let res = await req.text();\n  return res;\n};\n\nconst boi = async () => {\n  let test = await testFunc();\n  houses = JSON.parse(test);\n  console.log(houses);\n};\n\nasync function doIt() {\n  await boi();\n  let firstRow = houses[0];\n\n  const toWords = input => {\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n    return input.match(regex);\n  };\n\n  const toCamelCase = words => {\n    let result = \"\";\n\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i];\n      let wordMod = word.toLowerCase();\n\n      if (i !== 0) {\n        wordMod = wordMod.substr(0, 1).toUpperCase() + wordMod.substr(1);\n      }\n\n      result += wordMod;\n    }\n\n    return result;\n  };\n\n  const createKeyArray = inputArray => {\n    let result = [];\n\n    for (let i = 0; i < inputArray.length; i++) {\n      let entry = inputArray[i];\n      let modEntry = toCamelCase(toWords(entry));\n      result.push(modEntry);\n    }\n\n    return result;\n  };\n\n  const objectMap = (keyArray, dataArray) => {\n    for (let i = 1; i < dataArray.length; i++) {\n      let element = dataArray[i];\n\n      for (let j = 0; j < element.length; j++) {\n        let elementItem = element[j];\n        let keyItem = keyArray[j];\n        houseObject[keyItem] = elementItem;\n      }\n\n      homes.push(houseObject);\n      houseObject = {};\n    }\n  };\n\n  const idAdd = element => {\n    let newId = uuidv4();\n    return newId;\n  };\n\n  const formatDate = element => {\n    if (element !== null) {\n      let newDate = new Date(element.replace(/\\s/, 'T') + 'Z');\n      let month = newDate.getMonth() + 1;\n      let day = newDate.getDate();\n      let year = newDate.getFullYear();\n      return `${month}/${day}/${year}`;\n    } else {\n      return null;\n    }\n  };\n\n  const toBoolean = element => {\n    if (element === 'Yes') {\n      return true;\n    } else if (element === 'No') {\n      return false;\n    } else {\n      return null;\n    }\n  };\n\n  const toHex = element => {\n    return `#${element.substring(2)}`;\n  };\n\n  const progressAppend = (element, progArray) => {\n    for (let i = 0; i < progArray.length; i++) {\n      const key = progArray[i]; // console.log(key)\n\n      if (element === Object.keys(key)[0]) {\n        return Object.values(key)[0];\n      }\n    }\n  };\n\n  let keys = createKeyArray(firstRow);\n  let houseObject = {};\n  objectMap(keys, houses);\n  idAdd(homes);\n\n  for (let i = 0; i < homes.length; i++) {\n    const element = homes[i];\n    element.id = idAdd(element);\n    element.created = formatDate(element.created);\n    element.actualStart = formatDate(element.actualStart);\n    element.permit = formatDate(element.permit);\n    element.citySub = formatDate(element.citySub);\n    element.utilitiesPaid = formatDate(element.utilitiesPaid);\n    element.utilitiesSent = formatDate(element.utilitiesSent);\n    element.ccRs = toBoolean(element.ccRs);\n    element.floorJoists = toBoolean(element.floorJoists);\n    element.orderLumber = toBoolean(element.orderLumber);\n    element.orderMaterial = toBoolean(element.orderMaterial);\n    element.orderOsb = toBoolean(element.orderOsb);\n    element.planReview = toBoolean(element.planReview);\n    element.selections = toBoolean(element.selections);\n    element.trusses = toBoolean(element.trusses);\n    element.jobColor = toHex(element.jobColor);\n    element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress);\n  }\n\n  return homes;\n} // console.log(homes)\n// console.log(homes)\n// console.log(newDirtyProgress.dirtyProgress[6])\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(homes)\n// console.log(dirtyProgress)\n\n\ndoIt();\nconsole.log(houses);\nexport default homes = async () => {\n  return await doIt();\n}; // console.log(JSON.stringify(homes, null, 2));","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/dataClean.js"],"names":["axios","fetch","dirtyProgress","require","newDirtyProgress","v4","uuidv4","homes","houses","testFunc","req","method","body","JSON","stringify","url","res","text","boi","test","parse","console","log","doIt","firstRow","toWords","input","regex","match","toCamelCase","words","result","i","length","word","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","push","objectMap","keyArray","dataArray","element","j","elementItem","keyItem","houseObject","idAdd","newId","formatDate","newDate","Date","replace","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","key","Object","keys","values","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","jobName"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB,C,CACA;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,gBAAgB,GAAGF,aAAzB,C,CACA;;AACA,MAAM;AAAEG,EAAAA,EAAE,EAAEC;AAAN,IAAiBH,OAAO,CAAC,MAAD,CAA9B;;AAKA,IAAII,KAAK,GAAG,EAAZ;AACA,IAAIC,MAAJ;;AAGA,MAAMC,QAAQ,GAAG,YAAY;AACzB,QAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC,4BAAD,EAA+B;AAClDU,IAAAA,MAAM,EAAC,MAD2C;AAElDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,GAAG,EAAE;AAAN,KAAf;AAF4C,GAA/B,CAAvB;AAIA,MAAIC,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAhB;AACA,SAAOD,GAAP;AACH,CAPD;;AASA,MAAME,GAAG,GAAG,YAAY;AACpB,MAAIC,IAAI,GAAG,MAAMV,QAAQ,EAAzB;AACAD,EAAAA,MAAM,GAAGK,IAAI,CAACO,KAAL,CAAWD,IAAX,CAAT;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYd,MAAZ;AACH,CAJD;;AAOA,eAAee,IAAf,GAAsB;AAClB,QAAML,GAAG,EAAT;AACA,MAAIM,QAAQ,GAAGhB,MAAM,CAAC,CAAD,CAArB;;AAEA,QAAMiB,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAIC,KAAK,GAAG,2GAAZ;AAEA,WAAOD,KAAK,CAACE,KAAN,CAAYD,KAAZ,CAAP;AACH,GAJD;;AAMA,QAAME,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAIC,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,YAAME,IAAI,GAAGJ,KAAK,CAACE,CAAD,CAAlB;AACA,UAAIG,OAAO,GAAGD,IAAI,CAACE,WAAL,EAAd;;AAEA,UAAIJ,CAAC,KAAK,CAAV,EAAa;AACTG,QAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAe,CAAf,EAAiB,CAAjB,EAAoBC,WAApB,KAAoCH,OAAO,CAACE,MAAR,CAAe,CAAf,CAA9C;AACH;;AAEDN,MAAAA,MAAM,IAAGI,OAAT;AACH;;AACD,WAAOJ,MAAP;AACH,GAdD;;AAgBA,QAAMQ,cAAc,GAAIC,UAAD,IAAgB;AACnC,QAAIT,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,UAAU,CAACP,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,UAAIS,KAAK,GAAGD,UAAU,CAACR,CAAD,CAAtB;AACA,UAAIU,QAAQ,GAAGb,WAAW,CAACJ,OAAO,CAACgB,KAAD,CAAR,CAA1B;AACAV,MAAAA,MAAM,CAACY,IAAP,CAAYD,QAAZ;AACH;;AACD,WAAOX,MAAP;AACH,GARD;;AAUA,QAAMa,SAAS,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACvC,SAAK,IAAId,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,SAAS,CAACb,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIe,OAAO,GAAGD,SAAS,CAACd,CAAD,CAAvB;;AACA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACd,MAA5B,EAAoCe,CAAC,EAArC,EAAyC;AACrC,YAAIC,WAAW,GAAGF,OAAO,CAACC,CAAD,CAAzB;AACA,YAAIE,OAAO,GAAGL,QAAQ,CAACG,CAAD,CAAtB;AACAG,QAAAA,WAAW,CAACD,OAAD,CAAX,GAAuBD,WAAvB;AACH;;AACD1C,MAAAA,KAAK,CAACoC,IAAN,CAAWQ,WAAX;AACAA,MAAAA,WAAW,GAAG,EAAd;AACH;AACJ,GAXD;;AAeA,QAAMC,KAAK,GAAIL,OAAD,IAAa;AACvB,QAAIM,KAAK,GAAG/C,MAAM,EAAlB;AACA,WAAO+C,KAAP;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAIP,OAAD,IAAa;AAC5B,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AAClB,UAAIQ,OAAO,GAAG,IAAIC,IAAJ,CAAST,OAAO,CAACU,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,IAA2B,GAApC,CAAd;AACA,UAAIC,KAAK,GAAGH,OAAO,CAACI,QAAR,KAAmB,CAA/B;AACA,UAAIC,GAAG,GAAGL,OAAO,CAACM,OAAR,EAAV;AACA,UAAIC,IAAI,GAAGP,OAAO,CAACQ,WAAR,EAAX;AAGA,aAAQ,GAAEL,KAAM,IAAGE,GAAI,IAAGE,IAAK,EAA/B;AACH,KARD,MAQO;AACH,aAAO,IAAP;AACH;AACJ,GAZD;;AAcA,QAAME,SAAS,GAAIjB,OAAD,IAAa;AAC3B,QAAIA,OAAO,KAAK,KAAhB,EAAuB;AACnB,aAAO,IAAP;AACH,KAFD,MAEO,IAAIA,OAAO,KAAK,IAAhB,EAAsB;AACzB,aAAO,KAAP;AACH,KAFM,MAEA;AACH,aAAO,IAAP;AACH;AACJ,GARD;;AAUA,QAAMkB,KAAK,GAAIlB,OAAD,IAAa;AACvB,WAAQ,IAAGA,OAAO,CAACmB,SAAR,CAAkB,CAAlB,CAAqB,EAAhC;AACH,GAFD;;AAIA,QAAMC,cAAc,GAAG,CAACpB,OAAD,EAAUqB,SAAV,KAAwB;AAC3C,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoC,SAAS,CAACnC,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,YAAMqC,GAAG,GAAGD,SAAS,CAACpC,CAAD,CAArB,CADuC,CAEvC;;AACA,UAAIe,OAAO,KAAKuB,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiB,CAAjB,CAAhB,EAAqC;AACjC,eAAOC,MAAM,CAACE,MAAP,CAAcH,GAAd,EAAmB,CAAnB,CAAP;AACH;AACJ;AACJ,GARD;;AAUA,MAAIE,IAAI,GAAGhC,cAAc,CAACf,QAAD,CAAzB;AAEA,MAAI2B,WAAW,GAAG,EAAlB;AAIAP,EAAAA,SAAS,CAAC2B,IAAD,EAAO/D,MAAP,CAAT;AACA4C,EAAAA,KAAK,CAAC7C,KAAD,CAAL;;AAIA,OAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,KAAK,CAAC0B,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAMe,OAAO,GAAGxC,KAAK,CAACyB,CAAD,CAArB;AAEAe,IAAAA,OAAO,CAAC0B,EAAR,GAAarB,KAAK,CAACL,OAAD,CAAlB;AAEAA,IAAAA,OAAO,CAAC2B,OAAR,GAAkBpB,UAAU,CAACP,OAAO,CAAC2B,OAAT,CAA5B;AACA3B,IAAAA,OAAO,CAAC4B,WAAR,GAAsBrB,UAAU,CAACP,OAAO,CAAC4B,WAAT,CAAhC;AACA5B,IAAAA,OAAO,CAAC6B,MAAR,GAAiBtB,UAAU,CAACP,OAAO,CAAC6B,MAAT,CAA3B;AACA7B,IAAAA,OAAO,CAAC8B,OAAR,GAAkBvB,UAAU,CAACP,OAAO,CAAC8B,OAAT,CAA5B;AACA9B,IAAAA,OAAO,CAAC+B,aAAR,GAAwBxB,UAAU,CAACP,OAAO,CAAC+B,aAAT,CAAlC;AACA/B,IAAAA,OAAO,CAACgC,aAAR,GAAwBzB,UAAU,CAACP,OAAO,CAACgC,aAAT,CAAlC;AAEAhC,IAAAA,OAAO,CAACiC,IAAR,GAAehB,SAAS,CAACjB,OAAO,CAACiC,IAAT,CAAxB;AACAjC,IAAAA,OAAO,CAACkC,WAAR,GAAsBjB,SAAS,CAACjB,OAAO,CAACkC,WAAT,CAA/B;AACAlC,IAAAA,OAAO,CAACmC,WAAR,GAAsBlB,SAAS,CAACjB,OAAO,CAACmC,WAAT,CAA/B;AACAnC,IAAAA,OAAO,CAACoC,aAAR,GAAwBnB,SAAS,CAACjB,OAAO,CAACoC,aAAT,CAAjC;AACApC,IAAAA,OAAO,CAACqC,QAAR,GAAmBpB,SAAS,CAACjB,OAAO,CAACqC,QAAT,CAA5B;AACArC,IAAAA,OAAO,CAACsC,UAAR,GAAqBrB,SAAS,CAACjB,OAAO,CAACsC,UAAT,CAA9B;AACAtC,IAAAA,OAAO,CAACuC,UAAR,GAAqBtB,SAAS,CAACjB,OAAO,CAACuC,UAAT,CAA9B;AACAvC,IAAAA,OAAO,CAACwC,OAAR,GAAkBvB,SAAS,CAACjB,OAAO,CAACwC,OAAT,CAA3B;AAEAxC,IAAAA,OAAO,CAACyC,QAAR,GAAmBvB,KAAK,CAAClB,OAAO,CAACyC,QAAT,CAAxB;AAEAzC,IAAAA,OAAO,CAAC0C,QAAR,GAAmBtB,cAAc,CAACpB,OAAO,CAAC2C,OAAT,EAAkBtF,gBAAgB,CAACF,aAAnC,CAAjC;AACH;;AAED,SAAOK,KAAP;AACH,C,CAGD;AAGA;AAEA;AAEA;AACA;AAEA;AACA;;;AAEAgB,IAAI;AAEJF,OAAO,CAACC,GAAR,CAAYd,MAAZ;AAEA,eAAeD,KAAK,GAAG,YAAY;AAC/B,SAAO,MAAMgB,IAAI,EAAjB;AACH,CAFD,C,CAIA","sourcesContent":["import axios from 'axios';\r\nimport fetch from 'node-fetch';\r\n// import houses from './dataGrab';\r\nconst dirtyProgress = require(\"./progressClean\")\r\nconst newDirtyProgress = dirtyProgress\r\n// let houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\n\r\n\r\n\r\nlet homes = []\r\nlet houses;\r\n\r\n\r\nconst testFunc = async () => {\r\n    const req = await fetch(\"/.netlify/functions/puller\", {\r\n        method:'POST',\r\n        body: JSON.stringify({url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json'})\r\n    })\r\n    let res = await req.text()\r\n    return res\r\n}\r\n\r\nconst boi = async () => {\r\n    let test = await testFunc()\r\n    houses = JSON.parse(test)\r\n    console.log(houses)\r\n}\r\n\r\n\r\nasync function doIt (){\r\n    await boi()\r\n    let firstRow = houses[0];\r\n\r\n    const toWords = (input) => {\r\n        var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n        \r\n        return input.match(regex);\r\n    }\r\n\r\n    const toCamelCase = (words) => {\r\n        let result = \"\";\r\n        \r\n        for (let i = 0; i < words.length; i++) {\r\n            const word = words[i];\r\n            let wordMod = word.toLowerCase();\r\n            \r\n            if (i !== 0) {\r\n                wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n            }\r\n            \r\n            result +=wordMod;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const createKeyArray = (inputArray) => {\r\n        let result = [];\r\n        for (let i = 0; i < inputArray.length; i++) {\r\n            let entry = inputArray[i];\r\n            let modEntry = toCamelCase(toWords(entry));\r\n            result.push(modEntry);\r\n        } \r\n        return result;\r\n    }\r\n\r\n    const objectMap = (keyArray, dataArray) => {\r\n        for (let i = 1; i < dataArray.length; i++) {\r\n            let element = dataArray[i];\r\n            for (let j = 0; j < element.length; j++) {\r\n                let elementItem = element[j];\r\n                let keyItem = keyArray[j];\r\n                houseObject[keyItem] = elementItem;\r\n            }\r\n            homes.push(houseObject)\r\n            houseObject = {};\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const idAdd = (element) => {\r\n        let newId = uuidv4()\r\n        return newId\r\n    }\r\n\r\n    const formatDate = (element) => {\r\n        if (element !== null) {\r\n            let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n            let month = newDate.getMonth()+1\r\n            let day = newDate.getDate()\r\n            let year = newDate.getFullYear()\r\n            \r\n            \r\n            return `${month}/${day}/${year}`\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const toBoolean = (element) => {\r\n        if (element === 'Yes') {\r\n            return true\r\n        } else if (element === 'No') {\r\n            return false\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const toHex = (element) => {\r\n        return `#${element.substring(2)}`\r\n    }\r\n\r\n    const progressAppend = (element, progArray) => {\r\n        for (let i = 0; i < progArray.length; i++) {\r\n            const key = progArray[i];\r\n            // console.log(key)\r\n            if (element === Object.keys(key)[0]) {\r\n                return Object.values(key)[0]\r\n            }\r\n        }\r\n    }\r\n\r\n    let keys = createKeyArray(firstRow);\r\n\r\n    let houseObject = {};\r\n\r\n\r\n\r\n    objectMap(keys, houses);\r\n    idAdd(homes)\r\n\r\n\r\n\r\n    for (let i = 0; i < homes.length; i++) {\r\n        const element = homes[i];\r\n        \r\n        element.id = idAdd(element)\r\n        \r\n        element.created = formatDate(element.created)\r\n        element.actualStart = formatDate(element.actualStart)\r\n        element.permit = formatDate(element.permit)\r\n        element.citySub = formatDate(element.citySub)\r\n        element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n        element.utilitiesSent = formatDate(element.utilitiesSent)\r\n        \r\n        element.ccRs = toBoolean(element.ccRs)\r\n        element.floorJoists = toBoolean(element.floorJoists)\r\n        element.orderLumber = toBoolean(element.orderLumber)\r\n        element.orderMaterial = toBoolean(element.orderMaterial)\r\n        element.orderOsb = toBoolean(element.orderOsb)\r\n        element.planReview = toBoolean(element.planReview)\r\n        element.selections = toBoolean(element.selections)\r\n        element.trusses = toBoolean(element.trusses)\r\n        \r\n        element.jobColor = toHex(element.jobColor)\r\n        \r\n        element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress)\r\n    }\r\n\r\n    return homes\r\n}\r\n\r\n\r\n// console.log(homes)\r\n\r\n\r\n// console.log(homes)\r\n\r\n// console.log(newDirtyProgress.dirtyProgress[6])\r\n\r\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\r\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\r\n\r\n// console.log(homes)\r\n// console.log(dirtyProgress)\r\n\r\ndoIt()\r\n\r\nconsole.log(houses)\r\n\r\nexport default homes = async () => {\r\n    return await doIt()\r\n}\r\n\r\n// console.log(JSON.stringify(homes, null, 2));\r\n"]},"metadata":{},"sourceType":"module"}