{"ast":null,"code":"// const houses_progress = require(\"./progress.json\");\nconst fetchProgress = async () => {\n  await (await fetch('/.netlify/functions/progressPuller')).json();\n};\n\nlet dirtyProgress;\nconst globalRegex = new RegExp(/([*])\\w+/);\n\nasync function finalProgressFetch() {\n  fetchProgress().then(houses_progress => {\n    let lel = JSON.parse(houses_progress.data.chartData); // let form = JSON.parse(houses_progress.data.chartData)\n    // let date = JSON.parse(houses_progress.data.chartData)\n    // console.log(date.series)\n    // let progressObject = {}\n\n    let finalArray = [];\n    let newArray = [];\n    let newNewArray = [];\n\n    for (let i = 0; i < lel.series[0].data.length; i++) {\n      const element = lel.series[0].data[i].y;\n      newArray.push(Math.round(element));\n    }\n\n    for (let i = 0; i < lel.categories.length; i++) {\n      const element = lel.categories[i];\n      newNewArray.push(element);\n    }\n\n    const objMap = (keyArray, valueArray, outArray) => {\n      let progressObject = {};\n\n      for (let i = 0; i < keyArray.length; i++) {\n        progressObject = {};\n        const key = keyArray[i];\n        const value = valueArray[i];\n\n        if (globalRegex.test(key)) {\n          continue;\n        }\n\n        progressObject[key] = value;\n        outArray.push(progressObject);\n      }\n    };\n\n    objMap(newNewArray, newArray, finalArray); // console.log(finalArray)\n    // console.log(newArray.length)\n    // console.log(newNewArray.length)\n\n    dirtyProgress = finalArray;\n  });\n  console.log(dirtyProgress);\n  return dirtyProgress;\n}\n\nexport default finalProgressFetch;","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/progressClean.js"],"names":["fetchProgress","fetch","json","dirtyProgress","globalRegex","RegExp","finalProgressFetch","then","houses_progress","lel","JSON","parse","data","chartData","finalArray","newArray","newNewArray","i","series","length","element","y","push","Math","round","categories","objMap","keyArray","valueArray","outArray","progressObject","key","value","test","console","log"],"mappings":"AAAA;AAEA,MAAMA,aAAa,GAAG,YAAY;AAC9B,QAAM,CAAC,MAAMC,KAAK,CAAC,oCAAD,CAAZ,EAAoDC,IAApD,EAAN;AACH,CAFD;;AAIA,IAAIC,aAAJ;AAEA,MAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAApB;;AAGA,eAAeC,kBAAf,GAAoC;AAChCN,EAAAA,aAAa,GAAGO,IAAhB,CAAsBC,eAAD,IAAqB;AACtC,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,eAAe,CAACI,IAAhB,CAAqBC,SAAhC,CAAV,CADsC,CAGtC;AACA;AACA;AAGA;;AACA,QAAIC,UAAU,GAAG,EAAjB;AAEA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAGA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcN,IAAd,CAAmBO,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AAChD,YAAMG,OAAO,GAAGX,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcN,IAAd,CAAmBK,CAAnB,EAAsBI,CAAtC;AACAN,MAAAA,QAAQ,CAACO,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd;AACH;;AAGD,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,GAAG,CAACgB,UAAJ,CAAeN,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;AAC5C,YAAMG,OAAO,GAAGX,GAAG,CAACgB,UAAJ,CAAeR,CAAf,CAAhB;AACAD,MAAAA,WAAW,CAACM,IAAZ,CAAiBF,OAAjB;AACH;;AAED,UAAMM,MAAM,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,KAAoC;AAC/C,UAAIC,cAAc,GAAG,EAArB;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,QAAQ,CAACR,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACtCa,QAAAA,cAAc,GAAG,EAAjB;AACA,cAAMC,GAAG,GAAGJ,QAAQ,CAACV,CAAD,CAApB;AACA,cAAMe,KAAK,GAAGJ,UAAU,CAACX,CAAD,CAAxB;;AAEA,YAAIb,WAAW,CAAC6B,IAAZ,CAAiBF,GAAjB,CAAJ,EAA2B;AACvB;AACH;;AAEDD,QAAAA,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;AAEAH,QAAAA,QAAQ,CAACP,IAAT,CAAcQ,cAAd;AACH;AACJ,KAfD;;AAiBAJ,IAAAA,MAAM,CAACV,WAAD,EAAcD,QAAd,EAAwBD,UAAxB,CAAN,CA3CsC,CA8CtC;AACA;AACA;;AAEAX,IAAAA,aAAa,GAAGW,UAAhB;AACP,GAnDG;AAoDAoB,EAAAA,OAAO,CAACC,GAAR,CAAYhC,aAAZ;AACA,SAAOA,aAAP;AACH;;AAED,eAAeG,kBAAf","sourcesContent":["// const houses_progress = require(\"./progress.json\");\r\n\r\nconst fetchProgress = async () => {\r\n    await (await fetch('/.netlify/functions/progressPuller')).json();\r\n}\r\n\r\nlet dirtyProgress;\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\n\r\nasync function finalProgressFetch() {\r\n    fetchProgress().then((houses_progress) => {\r\n        let lel = JSON.parse(houses_progress.data.chartData)\r\n\r\n        // let form = JSON.parse(houses_progress.data.chartData)\r\n        // let date = JSON.parse(houses_progress.data.chartData)\r\n        // console.log(date.series)\r\n\r\n\r\n        // let progressObject = {}\r\n        let finalArray = []\r\n\r\n        let newArray = []\r\n        let newNewArray = []\r\n\r\n\r\n        for (let i = 0; i < lel.series[0].data.length; i++) {\r\n            const element = lel.series[0].data[i].y;\r\n            newArray.push(Math.round(element))\r\n        }\r\n\r\n\r\n        for (let i = 0; i < lel.categories.length; i++) {\r\n            const element = lel.categories[i];\r\n            newNewArray.push(element)\r\n        }\r\n\r\n        const objMap = (keyArray, valueArray, outArray) => {\r\n            let progressObject = {}\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                progressObject = {}\r\n                const key = keyArray[i];\r\n                const value = valueArray[i];\r\n\r\n                if (globalRegex.test(key)) {\r\n                    continue;\r\n                }\r\n\r\n                progressObject[key] = value\r\n                \r\n                outArray.push(progressObject)\r\n            }\r\n        }\r\n\r\n        objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n        // console.log(finalArray)\r\n        // console.log(newArray.length)\r\n        // console.log(newNewArray.length)\r\n\r\n        dirtyProgress = finalArray\r\n})\r\n    console.log(dirtyProgress)\r\n    return dirtyProgress\r\n}\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}