{"ast":null,"code":"// const houses_progress = require(\"./progress.json\");\nconst {\n  default: fetch\n} = require(\"node-fetch\");\n\nconst globalRegex = new RegExp(/([*])\\w+/);\nlet lel; // Parses the json data and save it to a variable\n\nconst fetchProgress = async () => {\n  let houses_progress = await (await fetch('/.netlify/functions/progressPuller')).json();\n  lel = JSON.parse(houses_progress.data.chartData);\n  return lel;\n}; // let form = JSON.parse(houses_progress.data.chartData)\n// let date = JSON.parse(houses_progress.data.chartData)\n// console.log(date.series)\n\n\nasync function finalProgressFetch() {\n  fetchProgress.then(lel => {\n    // let progressObject = {}\n    let finalArray = [];\n    let newArray = [];\n    let newNewArray = []; // Set newArray to list round numbers of the completion\n\n    for (let i = 0; i < lel.series[0].data.length; i++) {\n      const element = lel.series[0].data[i].y;\n      newArray.push(Math.round(element));\n    } // Set newNewArray to list all the houses\n\n\n    for (let i = 0; i < lel.categories.length; i++) {\n      const element = lel.categories[i];\n      newNewArray.push(element);\n    } // Maps the array of houses to the array of completion values\n    // Creates an array of objects: {house: percentage}\n\n\n    const objMap = (keyArray, valueArray, outArray) => {\n      let progressObject = {};\n\n      for (let i = 0; i < keyArray.length; i++) {\n        progressObject = {};\n        const key = keyArray[i];\n        const value = valueArray[i];\n\n        if (globalRegex.test(key)) {\n          continue;\n        }\n\n        progressObject[key] = value;\n        outArray.push(progressObject);\n      }\n    };\n\n    objMap(newNewArray, newArray, finalArray); // console.log(finalArray)\n    // console.log(newArray.length)\n    // console.log(newNewArray.length)\n\n    const dirtyProgress = finalArray;\n    return dirtyProgress;\n  });\n}\n\nexport default finalProgressFetch;","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/progressClean.js"],"names":["default","fetch","require","globalRegex","RegExp","lel","fetchProgress","houses_progress","json","JSON","parse","data","chartData","finalProgressFetch","then","finalArray","newArray","newNewArray","i","series","length","element","y","push","Math","round","categories","objMap","keyArray","valueArray","outArray","progressObject","key","value","test","dirtyProgress"],"mappings":"AAAA;AAEA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAqBC,OAAO,CAAC,YAAD,CAAlC;;AAEA,MAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAApB;AAEA,IAAIC,GAAJ,C,CAGA;;AAEA,MAAMC,aAAa,GAAG,YAAY;AAC9B,MAAIC,eAAe,GAAG,MAAM,CAAC,MAAMN,KAAK,CAAC,oCAAD,CAAZ,EAAoDO,IAApD,EAA5B;AACAH,EAAAA,GAAG,GAAGI,IAAI,CAACC,KAAL,CAAWH,eAAe,CAACI,IAAhB,CAAqBC,SAAhC,CAAN;AACA,SAAOP,GAAP;AACH,CAJD,C,CAOA;AACA;AACA;;;AAGA,eAAeQ,kBAAf,GAAoC;AAChCP,EAAAA,aAAa,CAACQ,IAAd,CAAoBT,GAAD,IAAS;AACxB;AACA,QAAIU,UAAU,GAAG,EAAjB;AACA,QAAIC,QAAQ,GAAG,EAAf;AACA,QAAIC,WAAW,GAAG,EAAlB,CAJwB,CAOxB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACc,MAAJ,CAAW,CAAX,EAAcR,IAAd,CAAmBS,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AAChD,YAAMG,OAAO,GAAGhB,GAAG,CAACc,MAAJ,CAAW,CAAX,EAAcR,IAAd,CAAmBO,CAAnB,EAAsBI,CAAtC;AACAN,MAAAA,QAAQ,CAACO,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd;AACH,KAXuB,CAaxB;;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACqB,UAAJ,CAAeN,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;AAC5C,YAAMG,OAAO,GAAGhB,GAAG,CAACqB,UAAJ,CAAeR,CAAf,CAAhB;AACAD,MAAAA,WAAW,CAACM,IAAZ,CAAiBF,OAAjB;AACH,KAjBuB,CAmBxB;AACA;;;AACA,UAAMM,MAAM,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,KAAoC;AAC/C,UAAIC,cAAc,GAAG,EAArB;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,QAAQ,CAACR,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACtCa,QAAAA,cAAc,GAAG,EAAjB;AACA,cAAMC,GAAG,GAAGJ,QAAQ,CAACV,CAAD,CAApB;AACA,cAAMe,KAAK,GAAGJ,UAAU,CAACX,CAAD,CAAxB;;AAEA,YAAIf,WAAW,CAAC+B,IAAZ,CAAiBF,GAAjB,CAAJ,EAA2B;AACvB;AACH;;AAEDD,QAAAA,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;AAEAH,QAAAA,QAAQ,CAACP,IAAT,CAAcQ,cAAd;AACH;AACJ,KAfD;;AAiBAJ,IAAAA,MAAM,CAACV,WAAD,EAAcD,QAAd,EAAwBD,UAAxB,CAAN,CAtCwB,CAyCxB;AACA;AACA;;AAEA,UAAMoB,aAAa,GAAGpB,UAAtB;AACA,WAAOoB,aAAP;AACH,GA/CD;AAgDE;;AAGN,eAAetB,kBAAf","sourcesContent":["// const houses_progress = require(\"./progress.json\");\r\n\r\nconst { default: fetch } = require(\"node-fetch\");\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\nlet lel;\r\n\r\n\r\n// Parses the json data and save it to a variable\r\n\r\nconst fetchProgress = async () => {\r\n    let houses_progress = await (await fetch('/.netlify/functions/progressPuller')).json()\r\n    lel = JSON.parse(houses_progress.data.chartData)\r\n    return lel\r\n}\r\n\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\n\r\nasync function finalProgressFetch() {\r\n    fetchProgress.then((lel) => {\r\n        // let progressObject = {}\r\n        let finalArray = []\r\n        let newArray = []\r\n        let newNewArray = []\r\n\r\n\r\n        // Set newArray to list round numbers of the completion\r\n        for (let i = 0; i < lel.series[0].data.length; i++) {\r\n            const element = lel.series[0].data[i].y;\r\n            newArray.push(Math.round(element))\r\n        }\r\n\r\n        // Set newNewArray to list all the houses\r\n        for (let i = 0; i < lel.categories.length; i++) {\r\n            const element = lel.categories[i];\r\n            newNewArray.push(element)\r\n        }\r\n\r\n        // Maps the array of houses to the array of completion values\r\n        // Creates an array of objects: {house: percentage}\r\n        const objMap = (keyArray, valueArray, outArray) => {\r\n            let progressObject = {}\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                progressObject = {}\r\n                const key = keyArray[i];\r\n                const value = valueArray[i];\r\n\r\n                if (globalRegex.test(key)) {\r\n                    continue;\r\n                }\r\n\r\n                progressObject[key] = value\r\n                \r\n                outArray.push(progressObject)\r\n            }\r\n        }\r\n\r\n        objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n        // console.log(finalArray)\r\n        // console.log(newArray.length)\r\n        // console.log(newNewArray.length)\r\n\r\n        const dirtyProgress = finalArray\r\n        return dirtyProgress\r\n    }\r\n    )}\r\n\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}