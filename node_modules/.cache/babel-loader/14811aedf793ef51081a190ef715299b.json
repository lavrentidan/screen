{"ast":null,"code":"import axios from 'axios';\nimport fetch from 'node-fetch';\n\nconst dirtyProgress = require(\"./progressClean\");\n\nconst newDirtyProgress = dirtyProgress;\n\nlet houses = require(\"./houses.json\");\n\nconst {\n  v4: uuidv4\n} = require(\"uuid\");\n\nconst testFunc = async () => {\n  const req = await fetch(\"/.netlify/functions/puller\", {\n    method: 'POST',\n    body: JSON.Object({\n      url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json'\n    })\n  });\n  let res = await req.text();\n  houses = res;\n};\n\ntestFunc();\nconsole.log(houses);\nlet firstRow = houses[0];\n\nconst toWords = input => {\n  var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n  return input.match(regex);\n};\n\nconst toCamelCase = words => {\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let wordMod = word.toLowerCase();\n\n    if (i !== 0) {\n      wordMod = wordMod.substr(0, 1).toUpperCase() + wordMod.substr(1);\n    }\n\n    result += wordMod;\n  }\n\n  return result;\n};\n\nconst createKeyArray = inputArray => {\n  let result = [];\n\n  for (let i = 0; i < inputArray.length; i++) {\n    let entry = inputArray[i];\n    let modEntry = toCamelCase(toWords(entry));\n    result.push(modEntry);\n  }\n\n  return result;\n};\n\nconst objectMap = (keyArray, dataArray) => {\n  for (let i = 1; i < dataArray.length; i++) {\n    let element = dataArray[i];\n\n    for (let j = 0; j < element.length; j++) {\n      let elementItem = element[j];\n      let keyItem = keyArray[j];\n      houseObject[keyItem] = elementItem;\n    }\n\n    homes.push(houseObject);\n    houseObject = {};\n  }\n};\n\nconst idAdd = element => {\n  let newId = uuidv4();\n  return newId;\n};\n\nconst formatDate = element => {\n  if (element !== null) {\n    let newDate = new Date(element.replace(/\\s/, 'T') + 'Z');\n    let month = newDate.getMonth() + 1;\n    let day = newDate.getDate();\n    let year = newDate.getFullYear();\n    return `${month}/${day}/${year}`;\n  } else {\n    return null;\n  }\n};\n\nconst toBoolean = element => {\n  if (element === 'Yes') {\n    return true;\n  } else if (element === 'No') {\n    return false;\n  } else {\n    return null;\n  }\n};\n\nconst toHex = element => {\n  return `#${element.substring(2)}`;\n};\n\nconst progressAppend = (element, progArray) => {\n  for (let i = 0; i < progArray.length; i++) {\n    const key = progArray[i]; // console.log(key)\n\n    if (element === Object.keys(key)[0]) {\n      return Object.values(key)[0];\n    }\n  }\n};\n\nlet keys = createKeyArray(firstRow);\nconst homes = [];\nlet houseObject = {};\nobjectMap(keys, houses);\nidAdd(homes);\n\nfor (let i = 0; i < homes.length; i++) {\n  const element = homes[i];\n  element.id = idAdd(element);\n  element.created = formatDate(element.created);\n  element.actualStart = formatDate(element.actualStart);\n  element.permit = formatDate(element.permit);\n  element.citySub = formatDate(element.citySub);\n  element.utilitiesPaid = formatDate(element.utilitiesPaid);\n  element.utilitiesSent = formatDate(element.utilitiesSent);\n  element.ccRs = toBoolean(element.ccRs);\n  element.floorJoists = toBoolean(element.floorJoists);\n  element.orderLumber = toBoolean(element.orderLumber);\n  element.orderMaterial = toBoolean(element.orderMaterial);\n  element.orderOsb = toBoolean(element.orderOsb);\n  element.planReview = toBoolean(element.planReview);\n  element.selections = toBoolean(element.selections);\n  element.trusses = toBoolean(element.trusses);\n  element.jobColor = toHex(element.jobColor);\n  element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress);\n} // console.log(homes)\n// console.log(homes)\n// console.log(newDirtyProgress.dirtyProgress[6])\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(homes)\n// console.log(dirtyProgress)\n\n\nexport default homes; // console.log(JSON.stringify(homes, null, 2));","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/dataClean.js"],"names":["axios","fetch","dirtyProgress","require","newDirtyProgress","houses","v4","uuidv4","testFunc","req","method","body","JSON","Object","url","res","text","console","log","firstRow","toWords","input","regex","match","toCamelCase","words","result","i","length","word","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","push","objectMap","keyArray","dataArray","element","j","elementItem","keyItem","houseObject","homes","idAdd","newId","formatDate","newDate","Date","replace","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","key","keys","values","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","jobName"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport fetch from 'node-fetch'\r\nconst dirtyProgress = require(\"./progressClean\")\r\nconst newDirtyProgress = dirtyProgress\r\nlet houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\n\r\nconst testFunc = async () => {\r\n    const req = await fetch(\"/.netlify/functions/puller\", {\r\n        method:'POST',\r\n        body: JSON.Object({url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json'})\r\n    })\r\n    let res = await req.text()\r\n    houses = res\r\n}\r\n\r\n\r\ntestFunc()\r\n\r\nconsole.log(houses)\r\n\r\nlet firstRow = houses[0];\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n\r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n\r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\n\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n    if (element !== null) {\r\n            let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n            let month = newDate.getMonth()+1\r\n            let day = newDate.getDate()\r\n            let year = newDate.getFullYear()\r\n\r\n\r\n            return `${month}/${day}/${year}`\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\nlet keys = createKeyArray(firstRow);\r\nconst homes = [];\r\nlet houseObject = {};\r\n\r\n\r\n\r\nobjectMap(keys, houses);\r\nidAdd(homes)\r\n\r\n\r\n\r\nfor (let i = 0; i < homes.length; i++) {\r\n    const element = homes[i];\r\n\r\n    element.id = idAdd(element)\r\n\r\n    element.created = formatDate(element.created)\r\n    element.actualStart = formatDate(element.actualStart)\r\n    element.permit = formatDate(element.permit)\r\n    element.citySub = formatDate(element.citySub)\r\n    element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n    element.utilitiesSent = formatDate(element.utilitiesSent)\r\n    \r\n    element.ccRs = toBoolean(element.ccRs)\r\n    element.floorJoists = toBoolean(element.floorJoists)\r\n    element.orderLumber = toBoolean(element.orderLumber)\r\n    element.orderMaterial = toBoolean(element.orderMaterial)\r\n    element.orderOsb = toBoolean(element.orderOsb)\r\n    element.planReview = toBoolean(element.planReview)\r\n    element.selections = toBoolean(element.selections)\r\n    element.trusses = toBoolean(element.trusses)\r\n\r\n    element.jobColor = toHex(element.jobColor)\r\n\r\n    element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress)\r\n}\r\n\r\n\r\n// console.log(homes)\r\n\r\n\r\n// console.log(homes)\r\n\r\n// console.log(newDirtyProgress.dirtyProgress[6])\r\n\r\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\r\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\r\n\r\n// console.log(homes)\r\n// console.log(dirtyProgress)\r\n\r\n\r\nexport default homes\r\n\r\n// console.log(JSON.stringify(homes, null, 2));"]},"metadata":{},"sourceType":"module"}