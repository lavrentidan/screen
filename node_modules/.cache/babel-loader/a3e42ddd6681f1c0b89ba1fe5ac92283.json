{"ast":null,"code":"import fetch from 'node-fetch'; // import axios from 'axios';\n\nconst axios = require('axios'); // import { request } from 'http';\n\n\nconst dirtyProgress = require(\"./progressClean\");\n\nconst newDirtyProgress = dirtyProgress; // let houses = require(\"./houses.json\");\n\nconst {\n  v4: uuidv4\n} = require(\"uuid\");\n\nconst https = require('https');\n\nconst request = require('request'); // let houses;\n// let url = \"https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json\"\n// let options = {\n//     url: '/.netlify/functions/puller',\n//     json: true,\n// };\n// https.get(url,(res) => {\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888')\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\n//     res.setHeader('Access-Control-Allow-Credentials', true);\n//     let body = \"\";\n//     res.on(\"data\", (chunk) => {\n//         body += chunk;\n//     });\n//     res.on(\"end\", () => {\n//         try {\n//             houses = JSON.parse(body);\n//             console.log(houses)\n//         } catch (error) {\n//             console.error(error.message);\n//         };\n//     });\n// }).on(\"error\", (error) => {\n//     console.error(error.message)\n// });\n// request(url, options, (error, res, body) => {\n//     if (error) {\n//         return  console.log(error)\n//     };\n//     if (!error && res.statusCode === 200) {\n//         console.log(body)\n//         houses = body\n//     };\n// });\n// function callback(error, response, body) {\n//     if (!error && response.statusCode === 200) {\n//         const info = JSON.parse(body);\n//         console.log(info)\n//     }\n// }\n// request(options, callback);\n\n\nlet houses;\naxios.get('https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json').then(response => {\n  console.log(response.data);\n  houses = response.data;\n});\n\nconst toWords = input => {\n  var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n  return input.match(regex);\n};\n\nconst toCamelCase = words => {\n  let result = \"\";\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let wordMod = word.toLowerCase();\n\n    if (i !== 0) {\n      wordMod = wordMod.substr(0, 1).toUpperCase() + wordMod.substr(1);\n    }\n\n    result += wordMod;\n  }\n\n  return result;\n};\n\nconst createKeyArray = inputArray => {\n  let result = [];\n\n  for (let i = 0; i < inputArray.length; i++) {\n    let entry = inputArray[i];\n    let modEntry = toCamelCase(toWords(entry));\n    result.push(modEntry);\n  }\n\n  return result;\n};\n\nconst objectMap = (keyArray, dataArray) => {\n  for (let i = 1; i < dataArray.length; i++) {\n    let element = dataArray[i];\n\n    for (let j = 0; j < element.length; j++) {\n      let elementItem = element[j];\n      let keyItem = keyArray[j];\n      houseObject[keyItem] = elementItem;\n    }\n\n    homes.push(houseObject);\n    houseObject = {};\n  }\n};\n\nconst idAdd = element => {\n  let newId = uuidv4();\n  return newId;\n};\n\nconst formatDate = element => {\n  if (element !== null) {\n    let newDate = new Date(element.replace(/\\s/, 'T') + 'Z');\n    let month = newDate.getMonth() + 1;\n    let day = newDate.getDate();\n    let year = newDate.getFullYear();\n    return `${month}/${day}/${year}`;\n  } else {\n    return null;\n  }\n};\n\nconst toBoolean = element => {\n  if (element === 'Yes') {\n    return true;\n  } else if (element === 'No') {\n    return false;\n  } else {\n    return null;\n  }\n};\n\nconst toHex = element => {\n  return `#${element.substring(2)}`;\n};\n\nconst progressAppend = (element, progArray) => {\n  for (let i = 0; i < progArray.length; i++) {\n    const key = progArray[i]; // console.log(key)\n\n    if (element === Object.keys(key)[0]) {\n      return Object.values(key)[0];\n    }\n  }\n};\n\nconst homes = [];\nlet houseObject = {};\n\nfunction dois() {\n  let firstRow = houses[0];\n  let keys = createKeyArray(firstRow);\n  objectMap(keys, houses);\n  idAdd(homes);\n\n  for (let i = 0; i < homes.length; i++) {\n    const element = homes[i];\n    element.id = idAdd(element);\n    element.created = formatDate(element.created);\n    element.actualStart = formatDate(element.actualStart);\n    element.permit = formatDate(element.permit);\n    element.citySub = formatDate(element.citySub);\n    element.utilitiesPaid = formatDate(element.utilitiesPaid);\n    element.utilitiesSent = formatDate(element.utilitiesSent);\n    element.ccRs = toBoolean(element.ccRs);\n    element.floorJoists = toBoolean(element.floorJoists);\n    element.orderLumber = toBoolean(element.orderLumber);\n    element.orderMaterial = toBoolean(element.orderMaterial);\n    element.orderOsb = toBoolean(element.orderOsb);\n    element.planReview = toBoolean(element.planReview);\n    element.selections = toBoolean(element.selections);\n    element.trusses = toBoolean(element.trusses);\n    element.jobColor = toHex(element.jobColor);\n    element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress);\n  }\n}\n\ndois(); // console.log(JSON.stringify(homes));\n\nexport default homes;","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/dataClean.js"],"names":["fetch","axios","require","dirtyProgress","newDirtyProgress","v4","uuidv4","https","request","houses","get","then","response","console","log","data","toWords","input","regex","match","toCamelCase","words","result","i","length","word","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","push","objectMap","keyArray","dataArray","element","j","elementItem","keyItem","houseObject","homes","idAdd","newId","formatDate","newDate","Date","replace","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","key","Object","keys","values","dois","firstRow","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","jobName"],"mappings":"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","sourcesContent":["import fetch from 'node-fetch'\r\n// import axios from 'axios';\r\nconst axios = require('axios')\r\n// import { request } from 'http';\r\nconst dirtyProgress = require(\"./progressClean\")\r\nconst newDirtyProgress = dirtyProgress\r\n// let houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nconst https = require ('https');\r\nconst request = require('request');\r\n\r\n// let houses;\r\n// let url = \"https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json\"\r\n// let options = {\r\n//     url: '/.netlify/functions/puller',\r\n//     json: true,\r\n// };\r\n\r\n\r\n// https.get(url,(res) => {\r\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888')\r\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n//     res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n//     let body = \"\";\r\n\r\n//     res.on(\"data\", (chunk) => {\r\n//         body += chunk;\r\n//     });\r\n\r\n//     res.on(\"end\", () => {\r\n//         try {\r\n//             houses = JSON.parse(body);\r\n//             console.log(houses)\r\n//         } catch (error) {\r\n//             console.error(error.message);\r\n//         };\r\n//     });\r\n\r\n// }).on(\"error\", (error) => {\r\n//     console.error(error.message)\r\n// });\r\n\r\n\r\n// request(url, options, (error, res, body) => {\r\n//     if (error) {\r\n//         return  console.log(error)\r\n//     };\r\n\r\n//     if (!error && res.statusCode === 200) {\r\n//         console.log(body)\r\n//         houses = body\r\n//     };\r\n// });\r\n\r\n\r\n\r\n\r\n// function callback(error, response, body) {\r\n//     if (!error && response.statusCode === 200) {\r\n//         const info = JSON.parse(body);\r\n//         console.log(info)\r\n//     }\r\n// }\r\n\r\n// request(options, callback);\r\n\r\nlet houses;\r\n\r\naxios.get('https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json')\r\n    .then(response => {\r\n        console.log(response.data)\r\n        houses = response.data\r\n    })\r\n\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n        \r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n        \r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n    if (element !== null) {\r\n        let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n        let month = newDate.getMonth()+1\r\n        let day = newDate.getDate()\r\n        let year = newDate.getFullYear()\r\n        \r\n        \r\n        return `${month}/${day}/${year}`\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst homes = [];\r\nlet houseObject = {};\r\n\r\n\r\nfunction dois() {\r\n    let firstRow = houses[0];\r\n    let keys = createKeyArray(firstRow);\r\n\r\n\r\n    objectMap(keys, houses);\r\n    idAdd(homes)\r\n\r\n\r\n    for (let i = 0; i < homes.length; i++) {\r\n        const element = homes[i];\r\n        \r\n        element.id = idAdd(element)\r\n        \r\n        element.created = formatDate(element.created)\r\n        element.actualStart = formatDate(element.actualStart)\r\n        element.permit = formatDate(element.permit)\r\n        element.citySub = formatDate(element.citySub)\r\n        element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n        element.utilitiesSent = formatDate(element.utilitiesSent)\r\n        \r\n        element.ccRs = toBoolean(element.ccRs)\r\n        element.floorJoists = toBoolean(element.floorJoists)\r\n        element.orderLumber = toBoolean(element.orderLumber)\r\n        element.orderMaterial = toBoolean(element.orderMaterial)\r\n        element.orderOsb = toBoolean(element.orderOsb)\r\n        element.planReview = toBoolean(element.planReview)\r\n        element.selections = toBoolean(element.selections)\r\n        element.trusses = toBoolean(element.trusses)\r\n        \r\n        element.jobColor = toHex(element.jobColor)\r\n        \r\n        element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress)\r\n    }\r\n}\r\n\r\n\r\ndois()\r\n\r\n// console.log(JSON.stringify(homes));\r\nexport default homes\r\n\r\n"]},"metadata":{},"sourceType":"module"}