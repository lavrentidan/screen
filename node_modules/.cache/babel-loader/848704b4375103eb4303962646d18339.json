{"ast":null,"code":"var dirtyProgress=require(\"./progressClean\");var newDirtyProgress=dirtyProgress;var houses=require(\"./houses.json\");var _require=require(\"uuid\"),uuidv4=_require.v4;var firstRow=houses[0];var toWords=function toWords(input){var regex=/[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;return input.match(regex);};var toCamelCase=function toCamelCase(words){var result=\"\";for(var i=0;i<words.length;i++){var word=words[i];var wordMod=word.toLowerCase();if(i!==0){wordMod=wordMod.substr(0,1).toUpperCase()+wordMod.substr(1);}result+=wordMod;}return result;};var createKeyArray=function createKeyArray(inputArray){var result=[];for(var i=0;i<inputArray.length;i++){var entry=inputArray[i];var modEntry=toCamelCase(toWords(entry));result.push(modEntry);}return result;};var objectMap=function objectMap(keyArray,dataArray){for(var i=1;i<dataArray.length;i++){var element=dataArray[i];for(var j=0;j<element.length;j++){var elementItem=element[j];var keyItem=keyArray[j];houseObject[keyItem]=elementItem;}homes.push(houseObject);houseObject={};}};var idAdd=function idAdd(element){var newId=uuidv4();return newId;};var formatDate=function formatDate(element){var newDate=new Date(element);if(element!==null){var month=newDate.getMonth()+1;var day=newDate.getDate();var year=newDate.getFullYear();return\"\".concat(month,\"/\").concat(day,\"/\").concat(year);}else{return null;}};var toBoolean=function toBoolean(element){if(element==='Yes'){return true;}else if(element==='No'){return false;}else{return null;}};var toHex=function toHex(element){return\"#\".concat(element.substring(2));};var progressAppend=function progressAppend(element,progArray){for(var i=0;i<progArray.length;i++){var key=progArray[i];// console.log(key)\nif(element===Object.keys(key)[0]){return Object.values(key)[0];}}};var keys=createKeyArray(firstRow);var homes=[];var houseObject={};objectMap(keys,houses);idAdd(homes);for(var i=0;i<homes.length;i++){var element=homes[i];element.id=idAdd(element);element.created=formatDate(element.created);element.actualStart=formatDate(element.actualStart);element.permit=formatDate(element.permit);element.citySub=formatDate(element.citySub);element.utilitiesPaid=formatDate(element.utilitiesPaid);element.utilitiesSent=formatDate(element.utilitiesSent);element.ccRs=toBoolean(element.ccRs);element.floorJoists=toBoolean(element.floorJoists);element.orderLumber=toBoolean(element.orderLumber);element.orderMaterial=toBoolean(element.orderMaterial);element.orderOsb=toBoolean(element.orderOsb);element.planReview=toBoolean(element.planReview);element.selections=toBoolean(element.selections);element.trusses=toBoolean(element.trusses);element.jobColor=toHex(element.jobColor);element.progress=progressAppend(element.jobName,newDirtyProgress.dirtyProgress);}// console.log(homes)\n// console.log(homes)\n// console.log(newDirtyProgress.dirtyProgress[6])\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\n// console.log(homes)\n// console.log(dirtyProgress)\nexport default homes;// console.log(JSON.stringify(homes, null, 2));","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/dataClean.js"],"names":["dirtyProgress","require","newDirtyProgress","houses","uuidv4","v4","firstRow","toWords","input","regex","match","toCamelCase","words","result","i","length","word","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","push","objectMap","keyArray","dataArray","element","j","elementItem","keyItem","houseObject","homes","idAdd","newId","formatDate","newDate","Date","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","key","Object","keys","values","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","jobName"],"mappings":"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","sourcesContent":["const dirtyProgress = require(\"./progressClean\")\r\nconst newDirtyProgress = dirtyProgress\r\nconst houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\nlet firstRow = houses[0];\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n\r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n\r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\n\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n        let newDate = new Date(element)\r\n        if (element !== null) {\r\n            let month = newDate.getMonth()+1\r\n            let day = newDate.getDate()\r\n            let year = newDate.getFullYear()\r\n\r\n            return `${month}/${day}/${year}`\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\nlet keys = createKeyArray(firstRow);\r\nconst homes = [];\r\nlet houseObject = {};\r\n\r\n\r\n\r\nobjectMap(keys, houses);\r\nidAdd(homes)\r\n\r\n\r\n\r\nfor (let i = 0; i < homes.length; i++) {\r\n    const element = homes[i];\r\n\r\n    element.id = idAdd(element)\r\n\r\n    element.created = formatDate(element.created)\r\n    element.actualStart = formatDate(element.actualStart)\r\n    element.permit = formatDate(element.permit)\r\n    element.citySub = formatDate(element.citySub)\r\n    element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n    element.utilitiesSent = formatDate(element.utilitiesSent)\r\n    \r\n    element.ccRs = toBoolean(element.ccRs)\r\n    element.floorJoists = toBoolean(element.floorJoists)\r\n    element.orderLumber = toBoolean(element.orderLumber)\r\n    element.orderMaterial = toBoolean(element.orderMaterial)\r\n    element.orderOsb = toBoolean(element.orderOsb)\r\n    element.planReview = toBoolean(element.planReview)\r\n    element.selections = toBoolean(element.selections)\r\n    element.trusses = toBoolean(element.trusses)\r\n\r\n    element.jobColor = toHex(element.jobColor)\r\n\r\n    element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress)\r\n}\r\n\r\n\r\n// console.log(homes)\r\n\r\n\r\n// console.log(homes)\r\n\r\n// console.log(newDirtyProgress.dirtyProgress[6])\r\n\r\n// console.log(Object.keys(newDirtyProgress.dirtyProgress[6])[0])\r\n// console.log(Object.values(newDirtyProgress.dirtyProgress[6])[0])\r\n\r\n// console.log(homes)\r\n// console.log(dirtyProgress)\r\n\r\n\r\nexport default homes\r\n\r\n// console.log(JSON.stringify(homes, null, 2));"]},"metadata":{},"sourceType":"module"}