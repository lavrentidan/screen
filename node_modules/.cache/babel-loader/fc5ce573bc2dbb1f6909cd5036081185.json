{"ast":null,"code":"var houses_progress=require(\"./progress.json\");var globalRegex=new RegExp(/([*])\\w+/);var lel=JSON.parse(houses_progress.data.chartData);// let form = JSON.parse(houses_progress.data.chartData)\n// let date = JSON.parse(houses_progress.data.chartData)\n// console.log(date.series)\n// let progressObject = {}\nvar finalArray=[];var newArray=[];var newNewArray=[];for(var i=0;i<lel.series[0].data.length;i++){var element=lel.series[0].data[i].y;newArray.push(Math.round(element));}for(var _i=0;_i<lel.categories.length;_i++){var _element=lel.categories[_i];newNewArray.push(_element);}var objMap=function objMap(keyArray,valueArray,outArray){var progressObject={};for(var _i2=0;_i2<keyArray.length;_i2++){progressObject={};var key=keyArray[_i2];var value=valueArray[_i2];if(globalRegex.test(key)){continue;}progressObject[key]=value;outArray.push(progressObject);}};objMap(newNewArray,newArray,finalArray);// console.log(finalArray)\n// console.log(newArray.length)\n// console.log(newNewArray.length)\nvar dirtyProgress=finalArray;module.exports={dirtyProgress:dirtyProgress};","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/progressClean.js"],"names":["houses_progress","require","globalRegex","RegExp","lel","JSON","parse","data","chartData","finalArray","newArray","newNewArray","i","series","length","element","y","push","Math","round","categories","objMap","keyArray","valueArray","outArray","progressObject","key","value","test","dirtyProgress","module","exports"],"mappings":"AAAA,GAAMA,CAAAA,eAAe,CAAGC,OAAO,CAAC,iBAAD,CAA/B,CAEA,GAAMC,CAAAA,WAAW,CAAG,GAAIC,CAAAA,MAAJ,CAAW,UAAX,CAApB,CAGA,GAAIC,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWN,eAAe,CAACO,IAAhB,CAAqBC,SAAhC,CAAV,CAEA;AACA;AACA;AAGA;AACA,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CAEA,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CACA,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CAGA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcN,IAAd,CAAmBO,MAAvC,CAA+CF,CAAC,EAAhD,CAAoD,CAChD,GAAMG,CAAAA,OAAO,CAAGX,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcN,IAAd,CAAmBK,CAAnB,EAAsBI,CAAtC,CACAN,QAAQ,CAACO,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd,EACH,CAGD,IAAK,GAAIH,CAAAA,EAAC,CAAG,CAAb,CAAgBA,EAAC,CAAGR,GAAG,CAACgB,UAAJ,CAAeN,MAAnC,CAA2CF,EAAC,EAA5C,CAAgD,CAC5C,GAAMG,CAAAA,QAAO,CAAGX,GAAG,CAACgB,UAAJ,CAAeR,EAAf,CAAhB,CACAD,WAAW,CAACM,IAAZ,CAAiBF,QAAjB,EACH,CAED,GAAMM,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,QAAD,CAAWC,UAAX,CAAuBC,QAAvB,CAAoC,CAC/C,GAAIC,CAAAA,cAAc,CAAG,EAArB,CACA,IAAK,GAAIb,CAAAA,GAAC,CAAG,CAAb,CAAgBA,GAAC,CAAGU,QAAQ,CAACR,MAA7B,CAAqCF,GAAC,EAAtC,CAA0C,CACtCa,cAAc,CAAG,EAAjB,CACA,GAAMC,CAAAA,GAAG,CAAGJ,QAAQ,CAACV,GAAD,CAApB,CACA,GAAMe,CAAAA,KAAK,CAAGJ,UAAU,CAACX,GAAD,CAAxB,CAEA,GAAIV,WAAW,CAAC0B,IAAZ,CAAiBF,GAAjB,CAAJ,CAA2B,CACvB,SACH,CAEDD,cAAc,CAACC,GAAD,CAAd,CAAsBC,KAAtB,CAEAH,QAAQ,CAACP,IAAT,CAAcQ,cAAd,EACH,CACJ,CAfD,CAiBAJ,MAAM,CAACV,WAAD,CAAcD,QAAd,CAAwBD,UAAxB,CAAN,CAGA;AACA;AACA;AAEA,GAAMoB,CAAAA,aAAa,CAAGpB,UAAtB,CAEAqB,MAAM,CAACC,OAAP,CAAiB,CAACF,aAAa,CAAbA,aAAD,CAAjB","sourcesContent":["const houses_progress = require(\"./progress.json\");\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\n\r\nlet lel = JSON.parse(houses_progress.data.chartData)\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\n\r\n// let progressObject = {}\r\nlet finalArray = []\r\n\r\nlet newArray = []\r\nlet newNewArray = []\r\n\r\n\r\nfor (let i = 0; i < lel.series[0].data.length; i++) {\r\n    const element = lel.series[0].data[i].y;\r\n    newArray.push(Math.round(element))\r\n}\r\n\r\n\r\nfor (let i = 0; i < lel.categories.length; i++) {\r\n    const element = lel.categories[i];\r\n    newNewArray.push(element)\r\n}\r\n\r\nconst objMap = (keyArray, valueArray, outArray) => {\r\n    let progressObject = {}\r\n    for (let i = 0; i < keyArray.length; i++) {\r\n        progressObject = {}\r\n        const key = keyArray[i];\r\n        const value = valueArray[i];\r\n\r\n        if (globalRegex.test(key)) {\r\n            continue;\r\n        }\r\n\r\n        progressObject[key] = value\r\n        \r\n        outArray.push(progressObject)\r\n    }\r\n}\r\n\r\nobjMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n// console.log(finalArray)\r\n// console.log(newArray.length)\r\n// console.log(newNewArray.length)\r\n\r\nconst dirtyProgress = finalArray\r\n\r\nmodule.exports = {dirtyProgress}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}