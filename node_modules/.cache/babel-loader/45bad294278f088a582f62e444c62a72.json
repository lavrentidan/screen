{"ast":null,"code":"// const houses_progress = require(\"./progress.json\");\nconst {\n  default: fetch\n} = require(\"node-fetch\");\n\nconst globalRegex = new RegExp(/([*])\\w+/);\nlet lel;\nlet dirtyProgress; // Parses the json data and save it to a variable\n\nconst fetchProgress = async () => {\n  let houses_progress = await (await fetch('/.netlify/functions/progressPuller')).json();\n  lel = JSON.parse(houses_progress.data.chartData);\n  return lel;\n}; // let form = JSON.parse(houses_progress.data.chartData)\n// let date = JSON.parse(houses_progress.data.chartData)\n// console.log(date.series)\n\n\nasync function finalProgressFetch() {\n  await fetchProgress(); // let progressObject = {}\n\n  let finalArray = [];\n  let newArray = [];\n  let newNewArray = []; // Set newArray to list round numbers of the completion\n\n  for (let i = 0; i < lel.series[0].data.length; i++) {\n    const element = lel.series[0].data[i].y;\n    newArray.push(Math.round(element));\n  } // Set newNewArray to list all the houses\n\n\n  for (let i = 0; i < lel.categories.length; i++) {\n    const element = lel.categories[i];\n    newNewArray.push(element);\n  } // Maps the array of houses to the array of completion values\n  // Creates an array of objects: {house: percentage}\n\n\n  const objMap = (keyArray, valueArray, outArray) => {\n    let progressObject = {};\n\n    for (let i = 0; i < keyArray.length; i++) {\n      progressObject = {};\n      const key = keyArray[i];\n      const value = valueArray[i];\n\n      if (globalRegex.test(key)) {\n        continue;\n      }\n\n      progressObject[key] = value;\n      outArray.push(progressObject);\n    }\n  };\n\n  objMap(newNewArray, newArray, finalArray); // console.log(finalArray)\n  // console.log(newArray.length)\n  // console.log(newNewArray.length)\n\n  dirtyProgress = finalArray;\n  console.log(dirtyProgress);\n} // return dirtyProgress\n\n\nexport default finalProgressFetch;","map":{"version":3,"sources":["C:/Users/daniel.lavrentiev/Desktop/screen-react-test/screen/src/progressClean.js"],"names":["default","fetch","require","globalRegex","RegExp","lel","dirtyProgress","fetchProgress","houses_progress","json","JSON","parse","data","chartData","finalProgressFetch","finalArray","newArray","newNewArray","i","series","length","element","y","push","Math","round","categories","objMap","keyArray","valueArray","outArray","progressObject","key","value","test","console","log"],"mappings":"AAAA;AAEA,MAAM;AAAEA,EAAAA,OAAO,EAAEC;AAAX,IAAqBC,OAAO,CAAC,YAAD,CAAlC;;AAEA,MAAMC,WAAW,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAApB;AAEA,IAAIC,GAAJ;AACA,IAAIC,aAAJ,C,CAEA;;AAEA,MAAMC,aAAa,GAAG,YAAY;AAC9B,MAAIC,eAAe,GAAG,MAAM,CAAC,MAAMP,KAAK,CAAC,oCAAD,CAAZ,EAAoDQ,IAApD,EAA5B;AACAJ,EAAAA,GAAG,GAAGK,IAAI,CAACC,KAAL,CAAWH,eAAe,CAACI,IAAhB,CAAqBC,SAAhC,CAAN;AACA,SAAOR,GAAP;AACH,CAJD,C,CAOA;AACA;AACA;;;AAGA,eAAeS,kBAAf,GAAoC;AAChC,QAAMP,aAAa,EAAnB,CADgC,CAEhC;;AACA,MAAIQ,UAAU,GAAG,EAAjB;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,WAAW,GAAG,EAAlB,CALgC,CAQhC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACc,MAAJ,CAAW,CAAX,EAAcP,IAAd,CAAmBQ,MAAvC,EAA+CF,CAAC,EAAhD,EAAoD;AAChD,UAAMG,OAAO,GAAGhB,GAAG,CAACc,MAAJ,CAAW,CAAX,EAAcP,IAAd,CAAmBM,CAAnB,EAAsBI,CAAtC;AACAN,IAAAA,QAAQ,CAACO,IAAT,CAAcC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd;AACH,GAZ+B,CAchC;;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,GAAG,CAACqB,UAAJ,CAAeN,MAAnC,EAA2CF,CAAC,EAA5C,EAAgD;AAC5C,UAAMG,OAAO,GAAGhB,GAAG,CAACqB,UAAJ,CAAeR,CAAf,CAAhB;AACAD,IAAAA,WAAW,CAACM,IAAZ,CAAiBF,OAAjB;AACH,GAlB+B,CAoBhC;AACA;;;AACA,QAAMM,MAAM,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,QAAvB,KAAoC;AAC/C,QAAIC,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,QAAQ,CAACR,MAA7B,EAAqCF,CAAC,EAAtC,EAA0C;AACtCa,MAAAA,cAAc,GAAG,EAAjB;AACA,YAAMC,GAAG,GAAGJ,QAAQ,CAACV,CAAD,CAApB;AACA,YAAMe,KAAK,GAAGJ,UAAU,CAACX,CAAD,CAAxB;;AAEA,UAAIf,WAAW,CAAC+B,IAAZ,CAAiBF,GAAjB,CAAJ,EAA2B;AACvB;AACH;;AAEDD,MAAAA,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;AAEAH,MAAAA,QAAQ,CAACP,IAAT,CAAcQ,cAAd;AACH;AACJ,GAfD;;AAiBAJ,EAAAA,MAAM,CAACV,WAAD,EAAcD,QAAd,EAAwBD,UAAxB,CAAN,CAvCgC,CA0ChC;AACA;AACA;;AAEAT,EAAAA,aAAa,GAAGS,UAAhB;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY9B,aAAZ;AACH,C,CACG;;;AAIJ,eAAeQ,kBAAf","sourcesContent":["// const houses_progress = require(\"./progress.json\");\r\n\r\nconst { default: fetch } = require(\"node-fetch\");\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\nlet lel;\r\nlet dirtyProgress;\r\n\r\n// Parses the json data and save it to a variable\r\n\r\nconst fetchProgress = async () => {\r\n    let houses_progress = await (await fetch('/.netlify/functions/progressPuller')).json()\r\n    lel = JSON.parse(houses_progress.data.chartData)\r\n    return lel\r\n}\r\n\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\n\r\nasync function finalProgressFetch() {\r\n    await fetchProgress()\r\n    // let progressObject = {}\r\n    let finalArray = []\r\n    let newArray = []\r\n    let newNewArray = []\r\n\r\n\r\n    // Set newArray to list round numbers of the completion\r\n    for (let i = 0; i < lel.series[0].data.length; i++) {\r\n        const element = lel.series[0].data[i].y;\r\n        newArray.push(Math.round(element))\r\n    }\r\n\r\n    // Set newNewArray to list all the houses\r\n    for (let i = 0; i < lel.categories.length; i++) {\r\n        const element = lel.categories[i];\r\n        newNewArray.push(element)\r\n    }\r\n\r\n    // Maps the array of houses to the array of completion values\r\n    // Creates an array of objects: {house: percentage}\r\n    const objMap = (keyArray, valueArray, outArray) => {\r\n        let progressObject = {}\r\n        for (let i = 0; i < keyArray.length; i++) {\r\n            progressObject = {}\r\n            const key = keyArray[i];\r\n            const value = valueArray[i];\r\n\r\n            if (globalRegex.test(key)) {\r\n                continue;\r\n            }\r\n\r\n            progressObject[key] = value\r\n            \r\n            outArray.push(progressObject)\r\n        }\r\n    }\r\n\r\n    objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n    // console.log(finalArray)\r\n    // console.log(newArray.length)\r\n    // console.log(newNewArray.length)\r\n\r\n    dirtyProgress = finalArray\r\n    console.log(dirtyProgress)\r\n}\r\n    // return dirtyProgress\r\n\r\n\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}