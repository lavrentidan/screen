{"version":3,"sources":["progressClean.js","dataClean.js","App.js","reportWebVitals.js","index.js"],"names":["lel","fetch","require","default","globalRegex","RegExp","fetchProgress","a","json","finalArray","newArray","newNewArray","then","i","jobProgress","length","element","push","Math","round","jobName","keyArray","valueArray","outArray","progressObject","key","value","test","objMap","finalProgressFetch","uuidv4","v4","toCamelCase","words","result","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","match","objectMap","dataArray","j","elementItem","keyItem","houseObject","homes","idAdd","formatDate","newDate","Date","replace","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","Object","keys","values","dirtyProgress","fetchHouses","oof","houses","firstRow","streetAddress","splice","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","console","log","finalFetch","TitleSection","props","hex","color","motion","div","className","style","backgroundColor","PillSection","pillList","company","modelNumber","subdivisionAndPhase","lotNumber","city","projectManager","listingAgent","jobType","ref","useRef","ul","expandClass","map","pill","li","IndicatorGroup","assignColor","indicatorVal","widthType","materials","osb","ccrs","lumber","PermitGroup","yearChopper","date","undefined","slice","utilNotifier","width","SqftGroup","sfAppender","garage","covered","LotGroup","lotSize","parcel","ProgressGroup","max","CardList","setIndex","items","filter","setHomes","useState","contentItem","layout","layoutId","onClick","ExpandedCard","index","card","flexWrap","alignContent","garageSf","coveredAreaSf","parcelNumber","FilterListItem","item","isPressed","setFilter","category","setFilterCategory","filterCategory","button","aria-pressed","DropDownContent","FILTER_NAMES","AnimateSharedLayout","DropDown","dropDownName","dropped","setDropped","NavFilter","type","getUnique","NavBar","handleForce","expanded","setExpanded","classNames","heightChanger","CITIES_MAP","All","Kennewick","home","Pasco","Richland","subMapper","sub","target","formattedSub","assign","array","arrayKeyValues","unshift","v","indexOf","App","forceState","setForceState","useEffect","req","fetchData","document","body","overflow","filteredHomes","testSubArray","SUBDIVISION_MAP","setTimeout","AnimatePresence","initial","opacity","animate","exit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c3fa61a0.chunk.js","sourcesContent":["// const houses_progress = require(\"./progress.json\");\r\nimport finalFetch from './dataClean'\r\nconst { default: fetch } = require(\"node-fetch\");\r\n\r\n\r\n\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\nlet lel;\r\nlet dirtyProgress;\r\n\r\n// Parses the json data and save it to a variable\r\nconst fetchProgress = async () => {\r\n    lel = await (await fetch('/.netlify/functions/progressPuller')).json()\r\n    // lel = JSON.parse(houses_progress)\r\n    return lel\r\n}\r\n\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\nlet finalArray = []\r\nlet newArray = []\r\nlet newNewArray = []\r\n\r\nasync function finalProgressFetch() {\r\n    fetchProgress().then((lel) => {\r\n        // let progressObject = {}\r\n\r\n\r\n        // Set newArray to list round numbers of the completion\r\n        for (let i = 0; i < lel.jobProgress.length; i++) {\r\n            const element = lel.jobProgress[i];\r\n            newArray.push(Math.round(element))\r\n        }\r\n\r\n        // Set newNewArray to list all the houses\r\n        for (let i = 0; i < lel.jobName.length; i++) {\r\n            const element = lel.jobName[i];\r\n            newNewArray.push(element)\r\n        }\r\n\r\n        // Maps the array of houses to the array of completion values\r\n        // Creates an array of objects: {house: percentage}\r\n        const objMap = (keyArray, valueArray, outArray) => {\r\n            let progressObject = {}\r\n            for (let i = 0; i < keyArray.length; i++) {\r\n                progressObject = {}\r\n                const key = keyArray[i];\r\n                const value = valueArray[i];\r\n\r\n                if (globalRegex.test(key)) {\r\n                    continue;\r\n                }\r\n\r\n                progressObject[key] = value\r\n                \r\n                outArray.push(progressObject)\r\n            }\r\n        }\r\n\r\n        objMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n        // console.log(finalArray)\r\n        // console.log(newArray.length)\r\n        // console.log(newNewArray.length)\r\n    })\r\n    return finalArray\r\n}\r\n\r\n\r\n\r\n\r\nexport default finalProgressFetch\r\n\r\n\r\n\r\n\r\n","// import houses from './dataGrab';\r\nimport finalProgressFetch from './progressClean'\r\nimport fetch from 'node-fetch'\r\n// import axios from 'axios';\r\nconst axios = require('axios')\r\n// import { request } from 'http';\r\n// const dirtyProgress = require(\"./progressClean\")\r\n// const newDirtyProgress = dirtyProgress\r\n// let houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nconst https = require ('https');\r\nconst request = require('request');\r\n\r\n\r\n// let houses;\r\n// let url = \"https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json\"\r\n// let options = {\r\n//     json: true,\r\n// };\r\n\r\n\r\n// https.get(url,(res) => {\r\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888')\r\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n//     res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n//     let body = \"\";\r\n\r\n//     res.on(\"data\", (chunk) => {\r\n//         body += chunk;\r\n//     });\r\n\r\n//     res.on(\"end\", () => {\r\n//         try {\r\n//             houses = JSON.parse(body);\r\n//             console.log(houses)\r\n//         } catch (error) {\r\n//             console.error(error.message);\r\n//         };\r\n//     });\r\n\r\n// }).on(\"error\", (error) => {\r\n//     console.error(error.message)\r\n// });\r\n\r\n\r\n// request(url, options, (error, res, body) => {\r\n//     if (error) {\r\n//         return  console.log(error)\r\n//     };\r\n\r\n//     if (!error && res.statusCode === 200) {\r\n//         console.log(body)\r\n//         houses = body\r\n//     };\r\n// });\r\n\r\n\r\n\r\n\r\n// function callback(error, response, body) {\r\n//     if (!error && response.statusCode === 200) {\r\n//         const info = JSON.parse(body);\r\n//         console.log(info)\r\n//     }\r\n// }\r\n\r\n// request(options, callback);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n        \r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n        \r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n    if (element !== null) {\r\n        let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n        let month = newDate.getMonth()+1\r\n        let day = newDate.getDate()\r\n        let year = newDate.getFullYear()\r\n        \r\n        \r\n        return `${month}/${day}/${year}`\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\nconst sortDate = (array) => {\r\n    homes = array.sort((a, b) => b.date - a.date)\r\n}\r\n\r\n\r\nlet homes = [];\r\nlet houseObject = {};\r\nlet dirtyProgress = [];\r\nlet infinityHomes = [];\r\n\r\nconst fetchHouses = async () =>\r\n    await (await fetch('/.netlify/functions/puller')).json();\r\n\r\n// const fetchInfinityHouses = async () =>\r\n//     await (await fetch('./')).json()\r\n\r\nconst fetchProgress = async () => {\r\n    let oof =  finalProgressFetch()\r\n    return oof\r\n}\r\n\r\nasync function finalFetch () {\r\n\r\n    dirtyProgress = await (await finalProgressFetch())\r\n    // infinityHomes = await (await fetchInfinityHouses())\r\n    fetchHouses().then((houses) => {\r\n\r\n    let firstRow = houses[0];\r\n    let keys = createKeyArray(firstRow);\r\n\r\n    objectMap(keys, houses);\r\n    idAdd(homes)\r\n\r\n    for (var i = homes.length - 1; i >= 0; i--) {\r\n        if (homes[i].streetAddress === null) {\r\n        homes.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < homes.length; i++) {\r\n        const element = homes[i];\r\n        \r\n        element.id = idAdd(element)\r\n        \r\n        element.created = formatDate(element.created)\r\n        element.actualStart = formatDate(element.actualStart)\r\n        element.permit = formatDate(element.permit)\r\n        element.citySub = formatDate(element.citySub)\r\n        element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n        element.utilitiesSent = formatDate(element.utilitiesSent)\r\n        \r\n        element.ccRs = toBoolean(element.ccRs)\r\n        element.floorJoists = toBoolean(element.floorJoists)\r\n        element.orderLumber = toBoolean(element.orderLumber)\r\n        element.orderMaterial = toBoolean(element.orderMaterial)\r\n        element.orderOsb = toBoolean(element.orderOsb)\r\n        element.planReview = toBoolean(element.planReview)\r\n        element.selections = toBoolean(element.selections)\r\n        element.trusses = toBoolean(element.trusses)\r\n        element.jobColor = toHex(element.jobColor)\r\n        \r\n        element.progress = progressAppend(element.jobName, dirtyProgress)\r\n    }\r\n})\r\n\r\n//     finalProgressFetch().then((dirtyProgress) => {\r\n//         console.log(dirtyProgress)\r\n//         for (let i = 0; i < homes.length; i++) {\r\n//             const element = homes[i];\r\n            \r\n//             element.progress = progressAppend(element.jobName, dirtyProgress)\r\n//         }\r\n// })\r\n\r\n    console.log(fetchProgress())\r\n\r\n    return homes\r\n}\r\n\r\n// finalFetch()\r\n\r\n\r\nexport default finalFetch;\r\n\r\n\r\n\r\n\r\n\r\n// console.log(JSON.stringify(homes));\r\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\"\r\nimport './App.css';\r\n// import homes from './dataClean';\r\n// import houseData from './dataClean'\r\nimport finalFetch from './dataClean';\r\n// import finalFetch from './dataClean';\r\n// let homes = await import ('./dataClean.js');\r\nimport axios from 'axios'\r\nimport fetch from 'node-fetch';\r\nimport DataGrid from 'react-data-grid'\r\nimport { Table, Column, HeaderCell, Cell } from 'rsuite-table'\r\nimport 'rsuite-table/dist/css/rsuite-table.css'\r\n\r\n\r\n// let {PythonShell} = require('python-shell');\r\n\r\n\r\n// let options = {\r\n//   scriptPath: 'C:/Users/daniel.lavrentiev/Dropbox/Screen Project/Scraper',\r\n//   pythonOptions: ['-u']\r\n// }\r\n\r\n\r\n// function handleRefresh () {\r\n//   PythonShell.run('test_cleaner.py', options, function (err, results) {\r\n//     if (err) throw err;\r\n//     console.log('results: &j', results);\r\n//   });\r\n// }\r\n\r\n\r\n// function ResetButton (props) {\r\n//   return (\r\n//     <button className='refresh'>Refresh</button>\r\n//   )\r\n// }\r\n\r\n\r\n\r\nconst updater = () => {\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction TitleSection(props) {\r\n\r\n  const hex = props.color\r\n\r\n  return (\r\n    <motion.div className='title-section'>\r\n      <motion.div className='color-square' style={{ backgroundColor: hex }} ></motion.div>\r\n      <motion.div className='title'>\r\n        {props.streetAddress}\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction PillSection(props) { // This code looks like shit, but don't screw with it\r\n  const pillList = [props.company,\r\n  props.modelNumber,\r\n  props.subdivisionAndPhase,\r\n  props.lotNumber,\r\n  props.city,\r\n  props.projectManager,\r\n  props.listingAgent,\r\n  props.jobType]\r\n  const ref = useRef(); // Don't not use useRef, using literally anything else will break this component\r\n  // const [isOverflowed, setIsOverflowed] = useState(false);\r\n  // const [testList, setTestList] = useState(pillList);\r\n  // let filtered = testList.filter((pill, index) => index < testList.length - 1);\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (ref.current.clientWidth < ref.current.scrollWidth) {\r\n  //     setIsOverflowed(true)\r\n  //   } else {\r\n  //     setIsOverflowed(false)\r\n  //   }\r\n  // }, [ref, isOverflowed])\r\n\r\n  // useEffect(() =>\r\n  //   !isOverflowed ? handleFilter : setIsOverflowed(false),\r\n  //   [isOverflowed]// I have no idea why this works but don't touch it\r\n  // )\r\n\r\n\r\n  // const handleOverflowRender = (list) => {\r\n  //   let overFlowVal = pillList.length - list.length\r\n  //   if (list.length < pillList.length) {\r\n  //     return <motion.li className='infopill-expand'>+{overFlowVal}</motion.li>\r\n  //   } else {\r\n  //   }\r\n  // }\r\n\r\n  // const handleFilter = () => {\r\n  //   let filtered = testList.filter((pill, index) => index < testList.length - 1);\r\n  //   setTestList(filtered)\r\n  // }\r\n\r\n\r\n  return (\r\n    <motion.ul ref={ref} className={props.expandClass}  >\r\n      {pillList.map((pill, i) =>\r\n        <motion.li key={i} className='infopill'>{pill}</motion.li>\r\n      )}\r\n      {/* {handleOverflowRender(testList)} */}\r\n    </motion.ul>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction IndicatorGroup(props) {\r\n\r\n  function assignColor(indicatorVal) {\r\n    if (indicatorVal) {\r\n      return 'rgb(122, 209, 106)'\r\n    } else {\r\n      return 'rgb(214, 79, 79)'\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className='grouper' id={props.widthType}>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.selections) }}>\r\n        Selections\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.materials) }} >\r\n        Materials\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.osb) }} >\r\n        OSB\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.planReview) }} >\r\n        Fee\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.floorJoists) }} >\r\n        Joists\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.ccrs) }} >\r\n        CCR\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.lumber) }} >\r\n        Lumber\r\n      </motion.div>\r\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.trusses) }} >\r\n        Trusses\r\n      </motion.div>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nfunction PermitGroup(props) {\r\n\r\n  function yearChopper(date) {\r\n    if (date !== null && date !== undefined) {\r\n      let chopped = (date.slice(0, -5))\r\n      // let choppedStr = chopped.toString()\r\n      return chopped\r\n    } else {\r\n      return 'null'\r\n    }\r\n  }\r\n\r\n  const utilNotifier = (value) => {\r\n    if (value !== null && value !== undefined) {\r\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\r\n    } else {\r\n      return <motion.div className='relational-notification'>!</motion.div>\r\n    }\r\n  }\r\n  const permitNotifier = (value) => {\r\n    if (value !== null && value !== undefined) {\r\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\r\n    } else {\r\n      return <motion.div className='relational-notification' style={{ backgroundColor: 'rgb(235,190,65)' }}>-</motion.div>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className='grouper' id='permit-group'>\r\n      <motion.div className='relational-container ' style={{ width: '45%' }}>\r\n        <motion.div className='relational-key'>City</motion.div>\r\n        <motion.div className='relational-line'></motion.div>\r\n        <motion.div className='relational-value'>{yearChopper(props.citySub)}</motion.div>\r\n      </motion.div>\r\n      <motion.div className='relational-container ' style={{ width: '55%' }}>\r\n        <motion.div className='relational-key'>Utils sent</motion.div>\r\n        <motion.div className='relational-line'></motion.div>\r\n        {utilNotifier(props.utilitiesSent)}\r\n      </motion.div>\r\n      <motion.div className='relational-container' style={{ width: '45%' }}>\r\n        <motion.div className='relational-key'>Permit</motion.div>\r\n        <motion.div className='relational-line'></motion.div>\r\n        <motion.div className='relational-value'>{yearChopper(props.permit)}</motion.div>\r\n\r\n      </motion.div>\r\n      <motion.div className='relational-container' style={{ width: '55%' }}>\r\n        <motion.div className='relational-key'>Utils payed</motion.div>\r\n        <motion.div className='relational-line'></motion.div>\r\n        {utilNotifier(props.utilitiesPaid)}\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\n\r\nfunction SqftGroup(props) {\r\n  const sfAppender = (value) => {\r\n    return `${value} SF`\r\n  }\r\n\r\n  return (\r\n    <motion.div className='grouper' id='sf-group' >\r\n      <motion.div className='relational-container' style={{ width: '100%' }} >\r\n        <motion.div className='relational-key' >Garage</motion.div>\r\n        <motion.div className='relational-line' ></motion.div>\r\n        <motion.div className='relational-value'>{sfAppender(props.garage)}</motion.div>\r\n      </motion.div>\r\n      <motion.div className='relational-container' style={{ width: '100%' }} >\r\n        <motion.div className='relational-key' >Covered</motion.div>\r\n        <motion.div className='relational-line' ></motion.div>\r\n        <motion.div className='relational-value'>{sfAppender(props.covered)}</motion.div>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\n\r\nfunction LotGroup(props) {\r\n\r\n  const parcelChecker = (value) => {\r\n    if (!value) {\r\n      return 'null'\r\n    } else {\r\n      return value\r\n    }\r\n  }\r\n\r\n  return (\r\n    <motion.div className='grouper' id='lot-group' >\r\n      <motion.div className='relational-container' style={{ width: '100%' }} >\r\n        <motion.div className='relational-key' >Lot Size</motion.div>\r\n        <motion.div className='relational-line' ></motion.div>\r\n        <motion.div className='relational-value'>{props.lotSize}</motion.div>\r\n      </motion.div>\r\n      <motion.div className='relational-container' style={{ width: '100%' }} >\r\n        <motion.div className='relational-key' >Parcel</motion.div>\r\n        <motion.div className='relational-line' ></motion.div>\r\n        <motion.div className='relational-value'>{parcelChecker(props.parcel)}</motion.div>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nfunction ProgressGroup(props) {\r\n  return (\r\n    <motion.div className='grouper' id='progress-group'>\r\n      <motion.div className='relational-container' style={{ width: '100%' }}>\r\n        <motion.div className='relational-key' >Schedule</motion.div>\r\n        <motion.progress max='100' value={props.progress} ></motion.progress>\r\n        <motion.div className='progress-text' >{props.progress}%</motion.div>\r\n      </motion.div>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nfunction CardList({ setIndex, items, setHomes, filter }) {\r\n\r\n  // const filtered = items.filter(home => home.city === 'West Richland')\r\n\r\n  const [cardUpdate, setCardUpdate] = useState(filter)\r\n\r\n\r\n\r\n  \r\n\r\n  // console.log(items);\r\n\r\n  return (\r\n    <ul className='cards-container'>\r\n      {items.map((contentItem, i) => (\r\n          <motion.li layout\r\n            className='card'\r\n            key={i}\r\n            layoutId={i}\r\n            onClick={() => setIndex(i)}\r\n          >\r\n\r\n            <motion.div layout layoutId={`${i}head`} className='head'>\r\n              <TitleSection streetAddress={contentItem.streetAddress} color={contentItem.jobColor} />\r\n              <PillSection expandClass='pill-container' modelNumber={contentItem.modelNumber} subdivisionAndPhase={contentItem.subdivisionAndPhase} lotNumber={contentItem.lotNumber} city={contentItem.city} projectManager={contentItem.projectManager} listingAgent={contentItem.listingAgent} jobType={contentItem.jobType} company={contentItem.company} />\r\n            </motion.div>\r\n\r\n\r\n            <motion.div className='body' layout layoutId={`${i}body`} >\r\n              <IndicatorGroup widthType='indicator-group' ccrs={contentItem.ccRs} floorJoists={contentItem.floorJoists} lumber={contentItem.orderLumber} materials={contentItem.orderMaterial} osb={contentItem.orderOsb} planReview={contentItem.planReview} selections={contentItem.selections} trusses={contentItem.trusses} />\r\n              <PermitGroup permit={contentItem.permit} utilitiesPaid={contentItem.utilitiesPaid} utilitiesSent={contentItem.utilitiesSent} citySub={contentItem.citySub} />\r\n            </motion.div>\r\n          </motion.li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nfunction ExpandedCard(props) {\r\n  return (\r\n    <div className='cards-container-unfolded' onClick={props.onClick}>\r\n      <motion.div layout\r\n        layoutId={props.index}\r\n        className='card-expanded'\r\n      >\r\n\r\n        <motion.div layout layoutId={`${[props.index]}head`} className='head'>\r\n          <TitleSection streetAddress={props.card.streetAddress} color={props.card.jobColor} />\r\n          <PillSection expandClass='pill-container-expanded' modelNumber={props.card.modelNumber} subdivisionAndPhase={props.card.subdivisionAndPhase} lotNumber={props.card.lotNumber} city={props.card.city} projectManager={props.card.projectManager} listingAgent={props.card.listingAgent} jobType={props.card.jobType} company={props.card.company} />\r\n        </motion.div>\r\n\r\n        <motion.div layout layoutId={`${[props.index]}body`} className='body' style={{ flexWrap: 'wrap', alignContent: 'flex-start' }}>\r\n          <IndicatorGroup widthType='indicator-group-expanded' ccrs={props.card.ccRs} floorJoists={props.card.floorJoists} lumber={props.card.orderLumber} materials={props.card.orderMaterial} osb={props.card.orderOsb} planReview={props.card.planReview} selections={props.card.selections} trusses={props.card.trusses} />\r\n          <ProgressGroup progress={props.card.progress} />\r\n          <PermitGroup permit={props.card.permit} utilitiesPaid={props.card.utilitiesPaid} utilitiesSent={props.card.utilitiesSent} citySub={props.card.citySub} />\r\n          <SqftGroup garage={props.card.garageSf} covered={props.card.coveredAreaSf} />\r\n          <LotGroup lotSize={'null'} parcel={props.card.parcelNumber} />\r\n        </motion.div>\r\n\r\n      </motion.div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction FilterListItem({item, isPressed, setFilter, category, filterCategory, setFilterCategory }) {\r\n\r\n  return (\r\n    <motion.button layout\r\n      className={!isPressed ? \"dropdown-item\" : \"dropdown-item dropdown-item-selected\"}\r\n      aria-pressed={isPressed}\r\n      onClick={() => {setFilterCategory(category); setFilter(item);}}\r\n      >\r\n        {item}\r\n    </motion.button>\r\n    );\r\n}\r\n\r\n\r\nfunction DropDownContent({ filter, setFilter, FILTER_NAMES, category, filterCategory, setFilterCategory }) {\r\n\r\n  // let cities = ['Kennewick', 'Pasco', 'Richland', 'West Richland']\r\n\r\n  // FILTER_NAMES.unshift(\"All\");\r\n\r\n  return (\r\n    <AnimateSharedLayout>\r\n      <motion.div layout className='dropdown-content-container' >\r\n        {FILTER_NAMES.map((item, i) => (\r\n          <FilterListItem\r\n            key={item}\r\n            item={item}\r\n            isPressed={item === filter}\r\n            setFilter={setFilter}\r\n            category={category}\r\n            filterCategory={filterCategory}\r\n            setFilterCategory={setFilterCategory}\r\n            >\r\n          </FilterListItem>\r\n        ))}\r\n      </motion.div>\r\n    </AnimateSharedLayout>\r\n  )\r\n}\r\n\r\nfunction DropDown({ filter, setFilter, FILTER_NAMES, dropDownName, category, filterCategory, setFilterCategory }) {\r\n  const [dropped, setDropped] = useState(false)\r\n  let dropHandler = () => {\r\n    setDropped(!dropped)\r\n  }\r\n  return (\r\n    <motion.li layout className=\"filter-item\" >\r\n    <motion.div layout style={{ width: \"min-content\" }} className=\"nav-item-title\" onClick={dropHandler}>{dropDownName}</motion.div>\r\n    {/* <br></br> */}\r\n    {dropped ? <DropDownContent filter={filter} setFilter={setFilter} FILTER_NAMES={FILTER_NAMES} category={category} filterCategory={filterCategory} setFilterCategory={setFilterCategory} ></DropDownContent> : ''}\r\n  </motion.li>\r\n  )\r\n}\r\n\r\nfunction NavFilter({ filter, setFilter, filterCategory, setFilterCategory, homes }) {\r\n\r\n  return (\r\n    <AnimateSharedLayout type=\"crossfade\">\r\n      <motion.div layout className=\"filter-container\">\r\n        <motion.div layout className=\"nav-row-title\">Filter:</motion.div>\r\n        <motion.ul layout className=\"filter-list\">\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'company')} category={'company'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Company'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'modelNumber')} category={'modelNumber'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'ModelNumber'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'subdivisionAndPhase')} category={'subdivisionAndPhase'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Subdivision'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'city')} category={'city'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'City'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'projectManager')} category={'projectManager'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Super'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'listingAgent')} category={'listingAgent'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Realtor'} />\r\n          <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'jobType')} category={'jobType'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Sale'} />\r\n          {/* <DropDown filter={filter} setFilter={setFilter} FILTER_NAMES={getUnique(homes, 'status')} category={'status'} filterCategory={filterCategory} setFilterCategory={setFilterCategory} dropDownName={'Status'} /> */}\r\n          <motion.li layout className=\"filter-item\">Todos</motion.li>\r\n          <motion.li layout className=\"filter-item\">Sub to city</motion.li>\r\n          <motion.li layout className=\"filter-item\">Permit</motion.li>\r\n          <motion.li layout className=\"filter-item\">Utils sent</motion.li>\r\n          <motion.li layout className=\"filter-item\">Utils paid</motion.li>\r\n          <motion.li layout className=\"filter-item\">Progress</motion.li>\r\n        </motion.ul>\r\n      </motion.div>\r\n    </AnimateSharedLayout>\r\n\r\n  );\r\n}\r\n\r\n\r\nfunction NavBar({ handleForce, filter, setFilter, filterCategory, setFilterCategory, homes }) {\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setExpanded(!expanded)\r\n  }\r\n\r\n  const heightChanger = () => {\r\n    if (expanded) {\r\n      return 'nav-unfolded'\r\n    }\r\n  }\r\n\r\n  const classNames = 'navbar ' + heightChanger()\r\n\r\n  return (\r\n    <nav layout className={classNames}>\r\n      <h2 className=\"nav-title\">BlackBoard</h2>\r\n      <ul className=\"nav-container\">\r\n        <li className=\"navbar-item\" onClick={handleClick}>\r\n          Expand bar\r\n              </li>\r\n        <li className=\"navbar-item\" onClick={handleForce}>\r\n          Refresh screen\r\n              </li>\r\n        <li className=\"navbar-item\">\r\n          Move to another page\r\n              </li>\r\n      </ul>\r\n      <div className=\"break\"></div>\r\n      { expanded ? <NavFilter filter={filter} setFilter={setFilter} filterCategory={filterCategory} setFilterCategory={setFilterCategory} homes={homes}></NavFilter> : null}\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\nconst CITIES_MAP = {\r\n  All: () => true,\r\n  Kennewick: home => home.city === 'Kennewick',\r\n  Pasco: home => home.city === 'Pasco',\r\n  Richland: home => home.city === 'Richland',\r\n  'West Richland': home => home.city === 'West Richland'\r\n};\r\n\r\n\r\nconst CITY_FILTER_NAMES = Object.keys(CITIES_MAP);\r\n\r\n\r\n\r\n\r\n\r\nfunction setColor(indicatorVal) {\r\n  if (indicatorVal) {\r\n    return 'rgb(122, 209, 106)'\r\n  } else {\r\n    return 'rgb(214, 79, 79)'\r\n  }\r\n}\r\n\r\nfunction subMapper (sub, target) {\r\n  let formattedSub = {[sub]: home => home.subdivisionAndPhase === sub}\r\n  console.log(formattedSub)\r\n  Object.assign(target, formattedSub)\r\n  // return {[sub]: home => home.subdivisionAndPhase === `${sub}`}\r\n  return formattedSub\r\n\r\n}\r\n\r\n\r\nfunction getUnique (array, key) {\r\n  let arrayKeyValues = []\r\n  arrayKeyValues.unshift(\"All\");\r\n  for (let i = 0; i < array.length; i++) {\r\n      const element = array[i][key];\r\n      arrayKeyValues.push(element)\r\n  }\r\n  return arrayKeyValues.filter((v, i, a) => a.indexOf(v) === i)\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [index, setIndex] = useState(false);\r\n  const [homes, setHomes] = useState([]);\r\n  const [forceState, setForceState] = useState(false)\r\n  const [filter, setFilter] = useState('All');\r\n  const [filterCategory, setFilterCategory] = useState(undefined)\r\n  \r\n  // const [filteredHomes, setFilteredHomes] = useState([])\r\n  // const [filteredHomes, setfilteredHomes] = useState(homes.filter(CITIES_MAP[filter]))\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const req = await finalFetch()\r\n      setHomes(req)\r\n    }\r\n    fetchData();\r\n  }, [setHomes])\r\n\r\n\r\n  function handleForce() {\r\n    setForceState(!forceState)\r\n  }\r\n\r\n  if (index !== false) {\r\n    document.body.style.overflow = 'hidden';\r\n  } else {\r\n    document.body.style.overflow = 'unset';\r\n  }\r\n\r\n  // setTimeout(setHomes(finalFetch), 3000)\r\n\r\n  // const filtered = homes.filter(home => home.city === 'West Richland')\r\n\r\n  // const filteredHomes = homes.filter(CITIES_MAP[filter])\r\n\r\n  // const thing = undefined\r\n  // const specificThing = undefined\r\n  const filteredHomes = (filter === \"All\") ? homes : homes.filter(home => home[filterCategory] === filter)\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   setFilteredHomes([])\r\n  //   setFilteredHomes(homes.filter(CITIES_MAP[filter]))\r\n  // }, [filter, homes])\r\n\r\n  const columns = [\r\n    {key: 'streetAddress', name: 'Address'},\r\n    {key: 'company', name: 'Company'},\r\n    {key: 'subdivisionAndPhase', name: 'Subdivision'}\r\n  ]\r\n\r\n\r\n\r\n\r\n  let testSubArray = getUnique(homes, 'subdivisionAndPhase')\r\n\r\n  console.log(testSubArray) \r\n\r\n\r\n  const SUBDIVISION_MAP = {}\r\n  const SUBDIVISION_FILTER_NAMES = Object.keys(SUBDIVISION_MAP);\r\n\r\n  for (let i = 0; i < testSubArray.length; i++) {\r\n    const element = testSubArray[i];\r\n    // console.log(subMapper(element, SUBDIVISION_MAP))\r\n    subMapper(element, SUBDIVISION_MAP)\r\n    // SUBDIVISION_MAP[element] = home => home.subdivisionAndPhase === element\r\n  }\r\n\r\n  console.log(CITIES_MAP)\r\n  console.log(SUBDIVISION_MAP)\r\n  \r\n\r\n\r\n  return (\r\n    <AnimateSharedLayout type=\"crossfade\">\r\n      <NavBar handleForce={handleForce} filter={filter} setFilter={setFilter} filterCategory={filterCategory} setFilterCategory={setFilterCategory} homes={homes}></NavBar>\r\n\r\n\r\n    {/* <Table data={filteredHomes} height={800} style={{ backgroundColor: \"rgb(46,46,52)\" }} >\r\n      <Column width={100} fixed resizable >\r\n        <HeaderCell style={{ backgroundColor: 'rgb(46,46,52)', color: 'white' }} >Address</HeaderCell>\r\n        <Cell dataKey=\"streetAddress\" style={{ backgroundColor: \"rgb(46,46,52)\", fontFamily: 'Roboto, sans-serif', fontWeight: 500, color: 'white', border: '1px solid rgb(73,73,77)', borderRight: '0px solid white', borderLeft: '0px solid white'}}/>\r\n      </Column>\r\n\r\n      <Column width={100} resizable>\r\n        <HeaderCell style={{ backgroundColor: 'rgb(46,46,52)', color: 'white' }} >Company</HeaderCell>\r\n        <Cell dataKey=\"company\" style={{ backgroundColor: \"rgb(46,46,52)\", border: '1px solid rgb(73,73,77)', borderRight: '0px solid white', borderLeft: '0px solid white' }} >\r\n          {(rowData, rowIndex) => {\r\n            return <div className='infopill' style={{width: 'min-content'}} >{rowData.company}</div>\r\n          }}\r\n        </Cell>\r\n      </Column>\r\n\r\n      <Column width={100} resizable>\r\n        <HeaderCell style={{ backgroundColor: 'rgb(46,46,52)', color: 'white' }} >Subdivision</HeaderCell>\r\n        <Cell dataKey=\"subdivisionAndPhase\" style={{ backgroundColor: \"rgb(46,46,52)\", border: '1px solid rgb(73,73,77)', borderRight: '0px solid white', borderLeft: '0px solid white' }} >\r\n        {(rowData, rowIndex) => {\r\n            return <div className='infopill' style={{width: 'min-content'}} >{rowData.subdivisionAndPhase}</div>\r\n          }}\r\n        </Cell>\r\n      </Column>\r\n\r\n      <Column width={100} resizable>\r\n        <HeaderCell style={{ backgroundColor: 'rgb(46,46,52)', color: 'white' }} >Indicators</HeaderCell>\r\n          <Cell dataKey=\"indicator\" style={{ backgroundColor: \"rgb(46,46,52)\", border: '1px solid rgb(73,73,77)', borderRight: '0px solid white', borderLeft: '0px solid white' }} >\r\n          {(rowData, rowIndex) => {\r\n              return ( \r\n              <div style={{ display: 'flex' }}>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.selections), width: 'min-content' }}>Selections</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.osb), width: 'min-content' }}>OSB</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.planReview), width: 'min-content' }}>Fee</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.floorJoists), width: 'min-content' }}>Joists</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.ccrs), width: 'min-content' }}>CCR</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.lumber), width: 'min-content' }}>Lumber</div>\r\n                <div className='indicator' style={{ backgroundColor: setColor(rowData.trusses), width: 'min-content' }}>Trusses</div>\r\n              </div>\r\n              )\r\n            }}\r\n          </Cell>\r\n        </Column>\r\n\r\n      <Column width={100} resizable>\r\n        <HeaderCell style={{ backgroundColor: 'rgb(46,46,52)', color: 'white' }} >Progress</HeaderCell>\r\n        <Cell dataKey=\"progress\" style={{ backgroundColor: \"rgb(46,46,52)\", border: '1px solid rgb(73,73,77)', borderRight: '0px solid white', borderLeft: '0px solid white' }} >\r\n        {(rowData, rowIndex) => {\r\n            return (\r\n              <div className='grouper oof'>\r\n                <progress max='100' value={rowData.progress} ></progress>\r\n                <div className='progress-text' >{rowData.progress}%</div>\r\n              </div>\r\n            )\r\n          }}\r\n        </Cell>\r\n      </Column>\r\n    </Table> */}\r\n\r\n      {/* <TestButton fetchData={fetchData} anotherVal={homes}></TestButton> */}\r\n      {/* <button onClick={handleForce}></button> */}\r\n      {homes.length > 0 ?\r\n        <CardList\r\n          items={filteredHomes}\r\n          setHomes={setHomes}\r\n          setIndex={setIndex}\r\n          filter={filter}\r\n        /> : setTimeout(() => handleForce(), 1000)}\r\n      <AnimatePresence>\r\n        {index !== false && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            key='modal'\r\n            className='modal'\r\n            onClick={() => setIndex(false)}\r\n          >\r\n\r\n          </motion.div>\r\n        )}\r\n\r\n        {index !== false && (\r\n          <ExpandedCard\r\n            key='expandedCard'\r\n            index={index}\r\n            card={filteredHomes[index]}\r\n            setIndex={setIndex}\r\n            onClick={() => setIndex(false)}\r\n          >\r\n          </ExpandedCard>\r\n        )}\r\n\r\n      </AnimatePresence>\r\n\r\n\r\n    </AnimateSharedLayout>\r\n\r\n  );\r\n}\r\n\r\n\r\n// const content = ['this is a test', 'this is another test', 'another testing thing', 'yet another testing thing', 'Lorem enim proident adipisicing sunt aute esse qui aliqua est tempor minim elit exercitation incididunt.', 'lorem12Sit sint excepteur in sint dolor mollit duis ea magna culpa.'];\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n// import homes from './dataClean';\r\n// import TestAlgo from './TestAlgo';\r\n// import {PythonShell} from 'python-shell';\r\n\r\n// let {PythonShell} = require('python-shell');\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}