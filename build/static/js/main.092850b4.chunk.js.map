{"version":3,"sources":["progressClean.js","dataClean.js","App.js","reportWebVitals.js","index.js"],"names":["houses_progress","require","globalRegex","RegExp","lel","JSON","parse","data","chartData","finalArray","newArray","newNewArray","i","series","length","element","y","push","Math","round","categories","keyArray","valueArray","outArray","progressObject","key","value","test","objMap","dirtyProgress","module","exports","newDirtyProgress","uuidv4","v4","toCamelCase","words","result","wordMod","toLowerCase","substr","toUpperCase","createKeyArray","inputArray","entry","modEntry","match","objectMap","dataArray","j","elementItem","keyItem","houseObject","homes","idAdd","formatDate","newDate","Date","replace","month","getMonth","day","getDate","year","getFullYear","toBoolean","toHex","substring","progressAppend","progArray","Object","keys","values","fetchHouses","a","fetch","json","then","houses","firstRow","id","created","actualStart","permit","citySub","utilitiesPaid","utilitiesSent","ccRs","floorJoists","orderLumber","orderMaterial","orderOsb","planReview","selections","trusses","jobColor","progress","jobName","finalFetch","TitleSection","props","hex","color","motion","div","className","style","backgroundColor","streetAddress","PillSection","pillList","company","modelNumber","subdivisionAndPhase","lotNumber","city","projectManager","listingAgent","jobType","ref","useRef","useState","isOverflowed","setIsOverflowed","testList","setTestList","filter","pill","index","useEffect","current","clientWidth","scrollWidth","handleFilter","filtered","ul","expandClass","map","li","list","overFlowVal","handleOverflowRender","IndicatorGroup","assignColor","indicatorVal","widthType","materials","osb","ccrs","lumber","PermitGroup","yearChopper","date","undefined","slice","utilNotifier","width","SqftGroup","sfAppender","garage","covered","LotGroup","lotSize","parcel","ProgressGroup","max","CardList","setIndex","items","setHomes","contentItem","layout","onClick","layoutId","console","log","ExpandedCard","card","flexWrap","alignContent","garageSf","coveredAreaSf","parcelNumber","App","forceState","setForceState","req","fetchData","AnimateSharedLayout","type","setTimeout","AnimatePresence","initial","opacity","animate","exit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iIAmBA,IAnBA,IAAMA,EAAkBC,EAAQ,KAE1BC,EAAc,IAAIC,OAAO,YAG3BC,EAAMC,KAAKC,MAAMN,EAAgBO,KAAKC,WAQtCC,EAAa,GAEbC,EAAW,GACXC,EAAc,GAGTC,EAAI,EAAGA,EAAIR,EAAIS,OAAO,GAAGN,KAAKO,OAAQF,IAAK,CAChD,IAAMG,EAAUX,EAAIS,OAAO,GAAGN,KAAKK,GAAGI,EACtCN,EAASO,KAAKC,KAAKC,MAAMJ,IAI7B,IAAK,IAAIH,EAAI,EAAGA,EAAIR,EAAIgB,WAAWN,OAAQF,IAAK,CAC5C,IAAMG,EAAUX,EAAIgB,WAAWR,GAC/BD,EAAYM,KAAKF,IAGN,SAACM,EAAUC,EAAYC,GAElC,IADA,IAAIC,EAAiB,GACZZ,EAAI,EAAGA,EAAIS,EAASP,OAAQF,IAAK,CACtCY,EAAiB,GACjB,IAAMC,EAAMJ,EAAST,GACfc,EAAQJ,EAAWV,GAErBV,EAAYyB,KAAKF,KAIrBD,EAAeC,GAAOC,EAEtBH,EAASN,KAAKO,KAItBI,CAAOjB,EAAaD,EAAUD,GAO9B,IAAMoB,EAAgBpB,EAEtBqB,EAAOC,QAAU,CAACF,kB,izzBClDZG,GAHQ/B,EAAQ,KAEAA,EAAQ,MAGlBgC,EAAWhC,EAAQ,KAAvBiC,GA4EFC,GA3EQlC,EAAS,IACPA,EAAQ,KA0EJ,SAACmC,GAGjB,IAFA,IAAIC,EAAS,GAEJzB,EAAI,EAAGA,EAAIwB,EAAMtB,OAAQF,IAAK,CACnC,IACI0B,EADSF,EAAMxB,GACA2B,cAET,IAAN3B,IACA0B,EAAUA,EAAQE,OAAO,EAAE,GAAGC,cAAgBH,EAAQE,OAAO,IAGjEH,GAASC,EAEb,OAAOD,IAGLK,EAAiB,SAACC,GAEpB,IADA,IAAIN,EAAS,GACJzB,EAAI,EAAGA,EAAI+B,EAAW7B,OAAQF,IAAK,CACxC,IAAIgC,EAAQD,EAAW/B,GACnBiC,EAAWV,EAAoBS,EAvB1BE,MAFD,8GA0BRT,EAAOpB,KAAK4B,GAEhB,OAAOR,GAGLU,EAAY,SAAC1B,EAAU2B,GACzB,IAAK,IAAIpC,EAAI,EAAGA,EAAIoC,EAAUlC,OAAQF,IAAK,CAEvC,IADA,IAAIG,EAAUiC,EAAUpC,GACfqC,EAAI,EAAGA,EAAIlC,EAAQD,OAAQmC,IAAK,CACrC,IAAIC,EAAcnC,EAAQkC,GACtBE,EAAU9B,EAAS4B,GACvBG,EAAYD,GAAWD,EAE3BG,EAAMpC,KAAKmC,GACXA,EAAc,KAIhBE,EAAQ,SAACvC,GAEX,OADYkB,KAIVsB,EAAa,SAACxC,GAChB,GAAgB,OAAZA,EAAkB,CAClB,IAAIyC,EAAU,IAAIC,KAAK1C,EAAQ2C,QAAQ,KAAM,KAAK,KAC9CC,EAAQH,EAAQI,WAAW,EAC3BC,EAAML,EAAQM,UACdC,EAAOP,EAAQQ,cAGnB,MAAM,GAAN,OAAUL,EAAV,YAAmBE,EAAnB,YAA0BE,GAE1B,OAAO,MAITE,EAAY,SAAClD,GACf,MAAgB,QAAZA,GAEmB,OAAZA,GAGA,MAITmD,EAAQ,SAACnD,GACX,MAAM,IAAN,OAAWA,EAAQoD,UAAU,KAG3BC,EAAiB,SAACrD,EAASsD,GAC7B,IAAK,IAAIzD,EAAI,EAAGA,EAAIyD,EAAUvD,OAAQF,IAAK,CACvC,IAAMa,EAAM4C,EAAUzD,GAEtB,GAAIG,IAAYuD,OAAOC,KAAK9C,GAAK,GAC7B,OAAO6C,OAAOE,OAAO/C,GAAK,KAQlC4B,EAAQ,GACRD,EAAc,GAEZqB,EAAW,uCAAG,sBAAAC,EAAA,sEACHC,IAAM,8BADH,8BACkCC,OADlC,mFAAH,qD,4CAGjB,sBAAAF,EAAA,6DACID,IAAcI,MAAK,SAACC,GAEpB,IAAIC,EAAWD,EAAO,GAClBP,EAAO7B,EAAeqC,GAG1BhC,EAAUwB,EAAMO,GAChBxB,IAGA,IAAK,IAAI1C,EAAI,EAAGA,EAAIyC,EAAMvC,OAAQF,IAAK,CACnC,IAAMG,EAAUsC,EAAMzC,GAEtBG,EAAQiE,GAAK1B,IAEbvC,EAAQkE,QAAU1B,EAAWxC,EAAQkE,SACrClE,EAAQmE,YAAc3B,EAAWxC,EAAQmE,aACzCnE,EAAQoE,OAAS5B,EAAWxC,EAAQoE,QACpCpE,EAAQqE,QAAU7B,EAAWxC,EAAQqE,SACrCrE,EAAQsE,cAAgB9B,EAAWxC,EAAQsE,eAC3CtE,EAAQuE,cAAgB/B,EAAWxC,EAAQuE,eAE3CvE,EAAQwE,KAAOtB,EAAUlD,EAAQwE,MACjCxE,EAAQyE,YAAcvB,EAAUlD,EAAQyE,aACxCzE,EAAQ0E,YAAcxB,EAAUlD,EAAQ0E,aACxC1E,EAAQ2E,cAAgBzB,EAAUlD,EAAQ2E,eAC1C3E,EAAQ4E,SAAW1B,EAAUlD,EAAQ4E,UACrC5E,EAAQ6E,WAAa3B,EAAUlD,EAAQ6E,YACvC7E,EAAQ8E,WAAa5B,EAAUlD,EAAQ8E,YACvC9E,EAAQ+E,QAAU7B,EAAUlD,EAAQ+E,SAEpC/E,EAAQgF,SAAW7B,EAAMnD,EAAQgF,UAEjChF,EAAQiF,SAAW5B,EAAerD,EAAQkF,QAASjE,EAAiBH,mBAlC5E,kBAsCWwB,GAtCX,4C,sBA4Ce6C,M,2DChLf,SAASC,EAAaC,GAEpB,IAAMC,EAAMD,EAAME,MAElB,OACE,eAACC,EAAA,EAAOC,IAAR,CAAYC,UAAU,gBAAtB,UACE,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,eAAeC,MAAO,CAAEC,gBAAiBN,KAC/D,cAACE,EAAA,EAAOC,IAAR,CAAYC,UAAU,QAAtB,SACGL,EAAMQ,mBAMf,SAASC,EAAYT,GACnB,IAAMU,EAAW,CAACV,EAAMW,QACxBX,EAAMY,YACNZ,EAAMa,oBACNb,EAAMc,UACNd,EAAMe,KACNf,EAAMgB,eACNhB,EAAMiB,aACNjB,EAAMkB,SACAC,EAAMC,mBATc,EAUcC,oBAAS,GAVvB,mBAUnBC,EAVmB,KAULC,EAVK,OAWMF,mBAASX,GAXf,mBAWnBc,EAXmB,KAWTC,EAXS,KAYXD,EAASE,QAAO,SAACC,EAAMC,GAAP,OAAiBA,EAAQJ,EAAS9G,OAAS,KAI1EmH,qBAAU,WACJV,EAAIW,QAAQC,YAAcZ,EAAIW,QAAQE,YACxCT,GAAgB,GAEhBA,GAAgB,KAEjB,CAACJ,EAAKG,IAETO,qBAAU,kBACPP,EAA8BC,GAAgB,GAA/BU,IAChB,CAACX,IAIH,IAQMW,EAAe,WACnB,IAAIC,EAAWV,EAASE,QAAO,SAACC,EAAMC,GAAP,OAAiBA,EAAQJ,EAAS9G,OAAS,KAC1E+G,EAAYS,IAId,OACE,eAAC/B,EAAA,EAAOgC,GAAR,CAAWhB,IAAKA,EAAKd,UAAWL,EAAMoC,YAAtC,UACGZ,EAASa,KAAI,SAACV,EAAMnH,GAAP,OACZ,cAAC2F,EAAA,EAAOmC,GAAR,CAAmBjC,UAAU,WAA7B,SAAyCsB,GAAzBnH,MAjBO,SAAC+H,GAC5B,IAAIC,EAAc9B,EAAShG,OAAS6H,EAAK7H,OACzC,GAAI6H,EAAK7H,OAASgG,EAAShG,OACzB,OAAO,eAACyF,EAAA,EAAOmC,GAAR,CAAWjC,UAAU,kBAArB,cAAyCmC,KAgB/CC,CAAqBjB,MAO5B,SAASkB,EAAe1C,GAEtB,SAAS2C,EAAYC,GACnB,OAAIA,EACK,qBAEA,mBAIX,OACE,eAACzC,EAAA,EAAOC,IAAR,CAAYC,UAAU,UAAUzB,GAAIoB,EAAM6C,UAA1C,UACE,cAAC1C,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMP,aAA9E,wBAGA,cAACU,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAM8C,YAA9E,uBAGA,cAAC3C,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAM+C,MAA9E,iBAGA,cAAC5C,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMR,aAA9E,iBAGA,cAACW,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMZ,cAA9E,oBAGA,cAACe,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMgD,OAA9E,iBAGA,cAAC7C,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMiD,SAA9E,oBAGA,cAAC9C,EAAA,EAAOC,IAAR,CAAYC,UAAU,YAAYC,MAAO,CAAEC,gBAAiBoC,EAAY3C,EAAMN,UAA9E,wBAON,SAASwD,EAAYlD,GAEnB,SAASmD,EAAYC,GACnB,OAAa,OAATA,QAA0BC,IAATD,EACJA,EAAKE,MAAM,GAAI,GAIvB,OAIX,IAAMC,EAAe,SAACjI,GACpB,OAAc,OAAVA,QAA4B+H,IAAV/H,EACb,cAAC6E,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0C8C,EAAY7H,KAEtD,cAAC6E,EAAA,EAAOC,IAAR,CAAYC,UAAU,0BAAtB,gBAWX,OACE,eAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,UAAUzB,GAAG,eAAnC,UACE,eAACuB,EAAA,EAAOC,IAAR,CAAYC,UAAU,wBAAwBC,MAAO,CAAEkD,MAAO,OAA9D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,kBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0C8C,EAAYnD,EAAMhB,cAE9D,eAACmB,EAAA,EAAOC,IAAR,CAAYC,UAAU,wBAAwBC,MAAO,CAAEkD,MAAO,OAA9D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,wBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACrBkD,EAAavD,EAAMd,kBAEtB,eAACiB,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,OAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,oBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0C8C,EAAYnD,EAAMjB,aAG9D,eAACoB,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,OAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,yBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACrBkD,EAAavD,EAAMf,qBAO5B,SAASwE,EAAUzD,GACjB,IAAM0D,EAAa,SAACpI,GAClB,MAAM,GAAN,OAAUA,EAAV,QAGF,OACE,eAAC6E,EAAA,EAAOC,IAAR,CAAYC,UAAU,UAAUzB,GAAG,WAAnC,UACE,eAACuB,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,QAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,oBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0CqD,EAAW1D,EAAM2D,aAE7D,eAACxD,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,QAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,qBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0CqD,EAAW1D,EAAM4D,iBAOnE,SAASC,EAAS7D,GAEhB,IAAuB1E,EAQvB,OACE,eAAC6E,EAAA,EAAOC,IAAR,CAAYC,UAAU,UAAUzB,GAAG,YAAnC,UACE,eAACuB,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,QAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,sBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,SAA0CL,EAAM8D,aAElD,eAAC3D,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,QAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,oBACA,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,oBACtB,cAACF,EAAA,EAAOC,IAAR,CAAYC,UAAU,mBAAtB,UAlBiB/E,EAkBuC0E,EAAM+D,OAjB7DzI,GACI,gBAsBb,SAAS0I,EAAchE,GACrB,OACE,cAACG,EAAA,EAAOC,IAAR,CAAYC,UAAU,UAAUzB,GAAG,iBAAnC,SACE,eAACuB,EAAA,EAAOC,IAAR,CAAYC,UAAU,uBAAuBC,MAAO,CAAEkD,MAAO,QAA7D,UACE,cAACrD,EAAA,EAAOC,IAAR,CAAYC,UAAU,iBAAtB,sBACA,cAACF,EAAA,EAAOP,SAAR,CAAiBqE,IAAI,MAAM3I,MAAO0E,EAAMJ,WACxC,eAACO,EAAA,EAAOC,IAAR,CAAYC,UAAU,gBAAtB,UAAwCL,EAAMJ,SAA9C,YAMR,SAASsE,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAmB,EAAZC,SAyBlC,OACE,oBAAIhE,UAAU,kBAAd,SACG+D,EAAM/B,KAAI,SAACiC,EAAa9J,GAAd,OACT8J,EAAY9D,cACV,eAACL,EAAA,EAAOmC,GAAR,CAAWiC,QAAM,EACflE,UAAU,OAEVmE,QAAS,kBAAML,EAAS3J,IACxBiK,SAAUH,EAAY1F,GAJxB,UAOE,eAACuB,EAAA,EAAOC,IAAR,CAAYmE,QAAM,EAACE,SAAQ,UAAKH,EAAY1F,GAAjB,QAA2ByB,UAAU,OAAhE,UACE,cAACN,EAAD,CAAcS,cAAe8D,EAAY9D,cAAeN,MAAOoE,EAAY3E,WAC3E,cAACc,EAAD,CAAa2B,YAAY,iBAAiBxB,YAAa0D,EAAY1D,YAAaC,oBAAqByD,EAAYzD,oBAAqBC,UAAWwD,EAAYxD,UAAWC,KAAMuD,EAAYvD,KAAMC,eAAgBsD,EAAYtD,eAAgBC,aAAcqD,EAAYrD,aAAcC,QAASoD,EAAYpD,QAASP,QAAS2D,EAAY3D,aAIzU,eAACR,EAAA,EAAOC,IAAR,CAAYC,UAAU,OAAOkE,QAAM,EAACE,SAAQ,UAAKH,EAAY1F,GAAjB,QAA5C,UACE,cAAC8D,EAAD,CAAgBG,UAAU,kBAAkBG,KAAMsB,EAAYnF,KAAMC,YAAakF,EAAYlF,YAAa6D,OAAQqB,EAAYjF,YAAayD,UAAWwB,EAAYhF,cAAeyD,IAAKuB,EAAY/E,SAAUC,WAAY8E,EAAY9E,WAAYC,WAAY6E,EAAY7E,WAAYC,QAAS4E,EAAY5E,UACzS,cAACwD,EAAD,CAAanE,OAAQuF,EAAYvF,OAAQE,cAAeqF,EAAYrF,cAAeC,cAAeoF,EAAYpF,cAAeF,QAASsF,EAAYtF,eAb/IxE,GAeQkK,QAAQC,IAAI,SAMrC,SAASC,EAAa5E,GACpB,OACE,qBAAKK,UAAU,2BAA2BmE,QAASxE,EAAMwE,QAAzD,SACE,eAACrE,EAAA,EAAOC,IAAR,CAAYmE,QAAM,EAChBE,SAAUzE,EAAM6E,KAAKjG,GACrByB,UAAU,gBAFZ,UAKE,eAACF,EAAA,EAAOC,IAAR,CAAYmE,QAAM,EAACE,SAAQ,UAAKzE,EAAM6E,KAAKjG,GAAhB,QAA0ByB,UAAU,OAA/D,UACE,cAACN,EAAD,CAAcS,cAAeR,EAAM6E,KAAKrE,cAAeN,MAAOF,EAAM6E,KAAKlF,WACzE,cAACc,EAAD,CAAa2B,YAAY,0BAA0BxB,YAAaZ,EAAM6E,KAAKjE,YAAaC,oBAAqBb,EAAM6E,KAAKhE,oBAAqBC,UAAWd,EAAM6E,KAAK/D,UAAWC,KAAMf,EAAM6E,KAAK9D,KAAMC,eAAgBhB,EAAM6E,KAAK7D,eAAgBC,aAAcjB,EAAM6E,KAAK5D,aAAcC,QAASlB,EAAM6E,KAAK3D,QAASP,QAASX,EAAM6E,KAAKlE,aAG1U,eAACR,EAAA,EAAOC,IAAR,CAAYmE,QAAM,EAACE,SAAQ,UAAKzE,EAAM6E,KAAKjG,GAAhB,QAA0ByB,UAAU,OAAOC,MAAO,CAAEwE,SAAU,OAAQC,aAAc,cAA/G,UACE,cAACrC,EAAD,CAAgBG,UAAU,2BAA2BG,KAAMhD,EAAM6E,KAAK1F,KAAMC,YAAaY,EAAM6E,KAAKzF,YAAa6D,OAAQjD,EAAM6E,KAAKxF,YAAayD,UAAW9C,EAAM6E,KAAKvF,cAAeyD,IAAK/C,EAAM6E,KAAKtF,SAAUC,WAAYQ,EAAM6E,KAAKrF,WAAYC,WAAYO,EAAM6E,KAAKpF,WAAYC,QAASM,EAAM6E,KAAKnF,UAC1S,cAACsE,EAAD,CAAepE,SAAUI,EAAM6E,KAAKjF,WACpC,cAACsD,EAAD,CAAanE,OAAQiB,EAAM6E,KAAK9F,OAAQE,cAAee,EAAM6E,KAAK5F,cAAeC,cAAec,EAAM6E,KAAK3F,cAAeF,QAASgB,EAAM6E,KAAK7F,UAC9I,cAACyE,EAAD,CAAWE,OAAQ3D,EAAM6E,KAAKG,SAAUpB,QAAS5D,EAAM6E,KAAKI,gBAC5D,cAACpB,EAAD,CAAUC,QAAS,OAAQC,OAAQ/D,EAAM6E,KAAKK,uBAqJzCC,MAhGf,WAAgB,IAAD,EAEa9D,oBAAS,GAFtB,mBAENO,EAFM,KAECuC,EAFD,OAGa9C,mBAAS,IAHtB,mBAGNpE,EAHM,KAGCoH,EAHD,OAIuBhD,oBAAS,GAJhC,mBAIN+D,EAJM,KAIMC,EAJN,KA2Db,OAjBAxD,qBAAU,WAAM,4CACd,4BAAAvD,EAAA,sEACoBwB,IADpB,OACQwF,EADR,OAEEjB,EAASiB,GAFX,4CADc,uBAAC,WAAD,wBAKdC,KACC,CAAClB,IAYF,eAACmB,EAAA,EAAD,CAAqBC,KAAK,YAA1B,UAGGxI,EAAMvC,OAAS,EAAI,cAACwJ,EAAD,CAAUE,MAAOnH,EAAOoH,SAAUA,EAAUF,SAAUA,IAAeuB,YAAW,WAXtGL,GAAeD,KAW4G,KACzH,eAACO,EAAA,EAAD,YACa,IAAV/D,GACC,cAACzB,EAAA,EAAOC,IAAR,CACEwF,QAAS,CAAEC,QAAS,GACpBC,QAAS,CAAED,QAAS,GACpBE,KAAM,CAAEF,QAAS,GAEjBxF,UAAU,QACVmE,QAAS,kBAAML,GAAS,KAFpB,UAOG,IAAVvC,GACC,cAACgD,EAAD,CAEEhD,MAAOA,EACPiD,KAAM5H,EAAM2E,GACZuC,SAAUA,EACVK,QAAS,kBAAML,GAAS,KAJpB,uBC1cD6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzH,MAAK,YAAkD,IAA/C0H,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCSdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.092850b4.chunk.js","sourcesContent":["const houses_progress = require(\"./progress.json\");\r\n\r\nconst globalRegex = new RegExp(/([*])\\w+/);\r\n\r\n\r\nlet lel = JSON.parse(houses_progress.data.chartData)\r\n\r\n// let form = JSON.parse(houses_progress.data.chartData)\r\n// let date = JSON.parse(houses_progress.data.chartData)\r\n// console.log(date.series)\r\n\r\n\r\n// let progressObject = {}\r\nlet finalArray = []\r\n\r\nlet newArray = []\r\nlet newNewArray = []\r\n\r\n\r\nfor (let i = 0; i < lel.series[0].data.length; i++) {\r\n    const element = lel.series[0].data[i].y;\r\n    newArray.push(Math.round(element))\r\n}\r\n\r\n\r\nfor (let i = 0; i < lel.categories.length; i++) {\r\n    const element = lel.categories[i];\r\n    newNewArray.push(element)\r\n}\r\n\r\nconst objMap = (keyArray, valueArray, outArray) => {\r\n    let progressObject = {}\r\n    for (let i = 0; i < keyArray.length; i++) {\r\n        progressObject = {}\r\n        const key = keyArray[i];\r\n        const value = valueArray[i];\r\n\r\n        if (globalRegex.test(key)) {\r\n            continue;\r\n        }\r\n\r\n        progressObject[key] = value\r\n        \r\n        outArray.push(progressObject)\r\n    }\r\n}\r\n\r\nobjMap(newNewArray, newArray, finalArray)\r\n\r\n\r\n// console.log(finalArray)\r\n// console.log(newArray.length)\r\n// console.log(newNewArray.length)\r\n\r\nconst dirtyProgress = finalArray\r\n\r\nmodule.exports = {dirtyProgress}\r\n\r\n\r\n\r\n\r\n","// import houses from './dataGrab';\r\nimport fetch from 'node-fetch'\r\n// import axios from 'axios';\r\nconst axios = require('axios')\r\n// import { request } from 'http';\r\nconst dirtyProgress = require(\"./progressClean\")\r\nconst newDirtyProgress = dirtyProgress\r\n// let houses = require(\"./houses.json\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\nconst https = require ('https');\r\nconst request = require('request');\r\n\r\n// let houses;\r\n// let url = \"https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json\"\r\n// let options = {\r\n//     json: true,\r\n// };\r\n\r\n\r\n// https.get(url,(res) => {\r\n//     res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8888')\r\n//     res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\r\n//     res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');\r\n//     res.setHeader('Access-Control-Allow-Credentials', true);\r\n\r\n//     let body = \"\";\r\n\r\n//     res.on(\"data\", (chunk) => {\r\n//         body += chunk;\r\n//     });\r\n\r\n//     res.on(\"end\", () => {\r\n//         try {\r\n//             houses = JSON.parse(body);\r\n//             console.log(houses)\r\n//         } catch (error) {\r\n//             console.error(error.message);\r\n//         };\r\n//     });\r\n\r\n// }).on(\"error\", (error) => {\r\n//     console.error(error.message)\r\n// });\r\n\r\n\r\n// request(url, options, (error, res, body) => {\r\n//     if (error) {\r\n//         return  console.log(error)\r\n//     };\r\n\r\n//     if (!error && res.statusCode === 200) {\r\n//         console.log(body)\r\n//         houses = body\r\n//     };\r\n// });\r\n\r\n\r\n\r\n\r\n// function callback(error, response, body) {\r\n//     if (!error && response.statusCode === 200) {\r\n//         const info = JSON.parse(body);\r\n//         console.log(info)\r\n//     }\r\n// }\r\n\r\n// request(options, callback);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst toWords = (input) => {\r\n    var regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\r\n    \r\n    return input.match(regex);\r\n}\r\n\r\nconst toCamelCase = (words) => {\r\n    let result = \"\";\r\n    \r\n    for (let i = 0; i < words.length; i++) {\r\n        const word = words[i];\r\n        let wordMod = word.toLowerCase();\r\n        \r\n        if (i !== 0) {\r\n            wordMod = wordMod.substr(0,1).toUpperCase() + wordMod.substr(1);\r\n        }\r\n        \r\n        result +=wordMod;\r\n    }\r\n    return result;\r\n}\r\n\r\nconst createKeyArray = (inputArray) => {\r\n    let result = [];\r\n    for (let i = 0; i < inputArray.length; i++) {\r\n        let entry = inputArray[i];\r\n        let modEntry = toCamelCase(toWords(entry));\r\n        result.push(modEntry);\r\n    } \r\n    return result;\r\n}\r\n\r\nconst objectMap = (keyArray, dataArray) => {\r\n    for (let i = 1; i < dataArray.length; i++) {\r\n        let element = dataArray[i];\r\n        for (let j = 0; j < element.length; j++) {\r\n            let elementItem = element[j];\r\n            let keyItem = keyArray[j];\r\n            houseObject[keyItem] = elementItem;\r\n        }\r\n        homes.push(houseObject)\r\n        houseObject = {};\r\n    }\r\n}\r\n\r\nconst idAdd = (element) => {\r\n    let newId = uuidv4()\r\n    return newId\r\n}\r\n\r\nconst formatDate = (element) => {\r\n    if (element !== null) {\r\n        let newDate = new Date(element.replace(/\\s/, 'T')+'Z')\r\n        let month = newDate.getMonth()+1\r\n        let day = newDate.getDate()\r\n        let year = newDate.getFullYear()\r\n        \r\n        \r\n        return `${month}/${day}/${year}`\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toBoolean = (element) => {\r\n    if (element === 'Yes') {\r\n        return true\r\n    } else if (element === 'No') {\r\n        return false\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nconst toHex = (element) => {\r\n    return `#${element.substring(2)}`\r\n}\r\n\r\nconst progressAppend = (element, progArray) => {\r\n    for (let i = 0; i < progArray.length; i++) {\r\n        const key = progArray[i];\r\n        // console.log(key)\r\n        if (element === Object.keys(key)[0]) {\r\n            return Object.values(key)[0]\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet homes = [];\r\nlet houseObject = {};\r\n\r\nconst fetchHouses = async () =>\r\n    await (await fetch('/.netlify/functions/puller')).json();\r\n\r\nasync function finalFetch () {\r\n    fetchHouses().then((houses) => {\r\n\r\n    let firstRow = houses[0];\r\n    let keys = createKeyArray(firstRow);\r\n\r\n\r\n    objectMap(keys, houses);\r\n    idAdd(homes)\r\n\r\n\r\n    for (let i = 0; i < homes.length; i++) {\r\n        const element = homes[i];\r\n        \r\n        element.id = idAdd(element)\r\n        \r\n        element.created = formatDate(element.created)\r\n        element.actualStart = formatDate(element.actualStart)\r\n        element.permit = formatDate(element.permit)\r\n        element.citySub = formatDate(element.citySub)\r\n        element.utilitiesPaid = formatDate(element.utilitiesPaid)\r\n        element.utilitiesSent = formatDate(element.utilitiesSent)\r\n        \r\n        element.ccRs = toBoolean(element.ccRs)\r\n        element.floorJoists = toBoolean(element.floorJoists)\r\n        element.orderLumber = toBoolean(element.orderLumber)\r\n        element.orderMaterial = toBoolean(element.orderMaterial)\r\n        element.orderOsb = toBoolean(element.orderOsb)\r\n        element.planReview = toBoolean(element.planReview)\r\n        element.selections = toBoolean(element.selections)\r\n        element.trusses = toBoolean(element.trusses)\r\n        \r\n        element.jobColor = toHex(element.jobColor)\r\n        \r\n        element.progress = progressAppend(element.jobName, newDirtyProgress.dirtyProgress)\r\n    }\r\n}\r\n)\r\n    return homes\r\n}\r\n\r\n// finalFetch()\r\n\r\n\r\nexport default finalFetch;\r\n\r\n\r\n\r\n\r\n\r\n// console.log(JSON.stringify(homes));\r\n","import React, { useEffect, useState, useCallback, useRef } from 'react';\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\"\nimport './App.css';\n// import homes from './dataClean';\n// import houseData from './dataClean'\nimport finalFetch from './dataClean';\n// import finalFetch from './dataClean';\n// let homes = await import ('./dataClean.js');\nimport axios from 'axios'\nimport fetch from 'node-fetch';\n\n// let {PythonShell} = require('python-shell');\n\n\n// let options = {\n//   scriptPath: 'C:/Users/daniel.lavrentiev/Dropbox/Screen Project/Scraper',\n//   pythonOptions: ['-u']\n// }\n\n\n// function handleRefresh () {\n//   PythonShell.run('test_cleaner.py', options, function (err, results) {\n//     if (err) throw err;\n//     console.log('results: &j', results);\n//   });\n// }\n\n\n// function ResetButton (props) {\n//   return (\n//     <button className='refresh'>Refresh</button>\n//   )\n// }\n\n\n\nconst updater = () => {\n\n}\n\n\n\n\nfunction TitleSection(props) {\n\n  const hex = props.color\n\n  return (\n    <motion.div className='title-section'>\n      <motion.div className='color-square' style={{ backgroundColor: hex }} ></motion.div>\n      <motion.div className='title'>\n        {props.streetAddress}\n      </motion.div>\n    </motion.div>\n  );\n}\n\nfunction PillSection(props) { // This code looks like shit, but don't screw with it\n  const pillList = [props.company,\n  props.modelNumber,\n  props.subdivisionAndPhase,\n  props.lotNumber,\n  props.city,\n  props.projectManager,\n  props.listingAgent,\n  props.jobType]\n  const ref = useRef(); // Don't not use useRef, using literally anything else will break this component\n  const [isOverflowed, setIsOverflowed] = useState(false);\n  const [testList, setTestList] = useState(pillList);\n  let filtered = testList.filter((pill, index) => index < testList.length - 1);\n\n\n\n  useEffect(() => {\n    if (ref.current.clientWidth < ref.current.scrollWidth) {\n      setIsOverflowed(true)\n    } else {\n      setIsOverflowed(false)\n    }\n  }, [ref, isOverflowed])\n\n  useEffect(() =>\n    !isOverflowed ? handleFilter : setIsOverflowed(false),\n    [isOverflowed]// I have no idea why this works but don't touch it\n  )\n\n\n  const handleOverflowRender = (list) => {\n    let overFlowVal = pillList.length - list.length\n    if (list.length < pillList.length) {\n      return <motion.li className='infopill-expand'>+{overFlowVal}</motion.li>\n    } else {\n    }\n  }\n\n  const handleFilter = () => {\n    let filtered = testList.filter((pill, index) => index < testList.length - 1);\n    setTestList(filtered)\n  }\n\n\n  return (\n    <motion.ul ref={ref} className={props.expandClass}  >\n      {testList.map((pill, i) =>\n        <motion.li key={i} className='infopill'>{pill}</motion.li>\n      )}\n      {handleOverflowRender(testList)}\n    </motion.ul>\n  )\n}\n\n\n\nfunction IndicatorGroup(props) {\n\n  function assignColor(indicatorVal) {\n    if (indicatorVal) {\n      return 'rgb(122, 209, 106)'\n    } else {\n      return 'rgb(214, 79, 79)'\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id={props.widthType}>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.selections) }}>\n        Selections\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.materials) }} >\n        Materials\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.osb) }} >\n        OSB\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.planReview) }} >\n        Fee\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.floorJoists) }} >\n        Joists\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.ccrs) }} >\n        CCR\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.lumber) }} >\n        Lumber\n      </motion.div>\n      <motion.div className='indicator' style={{ backgroundColor: assignColor(props.trusses) }} >\n        Trusses\n      </motion.div>\n    </motion.div>\n  );\n}\n\nfunction PermitGroup(props) {\n\n  function yearChopper(date) {\n    if (date !== null && date !== undefined) {\n      let chopped = (date.slice(0, -5))\n      // let choppedStr = chopped.toString()\n      return chopped\n    } else {\n      return 'null'\n    }\n  }\n\n  const utilNotifier = (value) => {\n    if (value !== null && value !== undefined) {\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\n    } else {\n      return <motion.div className='relational-notification'>!</motion.div>\n    }\n  }\n  const permitNotifier = (value) => {\n    if (value !== null && value !== undefined) {\n      return <motion.div className='relational-value'>{yearChopper(value)}</motion.div>\n    } else {\n      return <motion.div className='relational-notification' style={{ backgroundColor: 'rgb(235,190,65)' }}>-</motion.div>\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id='permit-group'>\n      <motion.div className='relational-container ' style={{ width: '45%' }}>\n        <motion.div className='relational-key'>City</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        <motion.div className='relational-value'>{yearChopper(props.citySub)}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container ' style={{ width: '55%' }}>\n        <motion.div className='relational-key'>Utils sent</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        {utilNotifier(props.utilitiesSent)}\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '45%' }}>\n        <motion.div className='relational-key'>Permit</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        <motion.div className='relational-value'>{yearChopper(props.permit)}</motion.div>\n\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '55%' }}>\n        <motion.div className='relational-key'>Utils payed</motion.div>\n        <motion.div className='relational-line'></motion.div>\n        {utilNotifier(props.utilitiesPaid)}\n      </motion.div>\n    </motion.div>\n  )\n}\n\n\nfunction SqftGroup(props) {\n  const sfAppender = (value) => {\n    return `${value} SF`\n  }\n\n  return (\n    <motion.div className='grouper' id='sf-group' >\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Garage</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{sfAppender(props.garage)}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Covered</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{sfAppender(props.covered)}</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\n\nfunction LotGroup(props) {\n\n  const parcelChecker = (value) => {\n    if (!value) {\n      return 'null'\n    } else {\n      return value\n    }\n  }\n\n  return (\n    <motion.div className='grouper' id='lot-group' >\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Lot Size</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{props.lotSize}</motion.div>\n      </motion.div>\n      <motion.div className='relational-container' style={{ width: '100%' }} >\n        <motion.div className='relational-key' >Parcel</motion.div>\n        <motion.div className='relational-line' ></motion.div>\n        <motion.div className='relational-value'>{parcelChecker(props.parcel)}</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\nfunction ProgressGroup(props) {\n  return (\n    <motion.div className='grouper' id='progress-group'>\n      <motion.div className='relational-container' style={{ width: '100%' }}>\n        <motion.div className='relational-key' >Schedule</motion.div>\n        <motion.progress max='100' value={props.progress} ></motion.progress>\n        <motion.div className='progress-text' >{props.progress}%</motion.div>\n      </motion.div>\n    </motion.div>\n  )\n}\n\nfunction CardList({setIndex, items, setHomes }) {\n\n\n  // async function handleChange() {\n  //   setTest(true)\n  //   if (test) {\n  //     setItems(await testFetchFunc())\n  //     // console.log(houseData)\n  //   } else {\n  //     setItems([])\n  //   }\n  // }\n\n\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     const req = await finalFetch()\n  //     setHomes(req)\n  //   }\n  //   fetchData();\n  // }, [setHomes])\n\n\n\n\n  return (\n    <ul className='cards-container'>\n      {items.map((contentItem, i) => (\n        contentItem.streetAddress ?\n          <motion.li layout\n            className='card'\n            key={i}\n            onClick={() => setIndex(i)}\n            layoutId={contentItem.id}\n          >\n\n            <motion.div layout layoutId={`${contentItem.id}head`} className='head'>\n              <TitleSection streetAddress={contentItem.streetAddress} color={contentItem.jobColor} />\n              <PillSection expandClass='pill-container' modelNumber={contentItem.modelNumber} subdivisionAndPhase={contentItem.subdivisionAndPhase} lotNumber={contentItem.lotNumber} city={contentItem.city} projectManager={contentItem.projectManager} listingAgent={contentItem.listingAgent} jobType={contentItem.jobType} company={contentItem.company} />\n            </motion.div>\n\n\n            <motion.div className='body' layout layoutId={`${contentItem.id}body`} >\n              <IndicatorGroup widthType='indicator-group' ccrs={contentItem.ccRs} floorJoists={contentItem.floorJoists} lumber={contentItem.orderLumber} materials={contentItem.orderMaterial} osb={contentItem.orderOsb} planReview={contentItem.planReview} selections={contentItem.selections} trusses={contentItem.trusses} />\n              <PermitGroup permit={contentItem.permit} utilitiesPaid={contentItem.utilitiesPaid} utilitiesSent={contentItem.utilitiesSent} citySub={contentItem.citySub} />\n            </motion.div>\n          </motion.li> : console.log('')\n      ))}\n    </ul>\n  )\n}\n\nfunction ExpandedCard(props) {\n  return (\n    <div className='cards-container-unfolded' onClick={props.onClick}>\n      <motion.div layout\n        layoutId={props.card.id}\n        className='card-expanded'\n      >\n\n        <motion.div layout layoutId={`${props.card.id}head`} className='head'>\n          <TitleSection streetAddress={props.card.streetAddress} color={props.card.jobColor} />\n          <PillSection expandClass='pill-container-expanded' modelNumber={props.card.modelNumber} subdivisionAndPhase={props.card.subdivisionAndPhase} lotNumber={props.card.lotNumber} city={props.card.city} projectManager={props.card.projectManager} listingAgent={props.card.listingAgent} jobType={props.card.jobType} company={props.card.company} />\n        </motion.div>\n\n        <motion.div layout layoutId={`${props.card.id}body`} className='body' style={{ flexWrap: 'wrap', alignContent: 'flex-start' }}>\n          <IndicatorGroup widthType='indicator-group-expanded' ccrs={props.card.ccRs} floorJoists={props.card.floorJoists} lumber={props.card.orderLumber} materials={props.card.orderMaterial} osb={props.card.orderOsb} planReview={props.card.planReview} selections={props.card.selections} trusses={props.card.trusses} />\n          <ProgressGroup progress={props.card.progress} />\n          <PermitGroup permit={props.card.permit} utilitiesPaid={props.card.utilitiesPaid} utilitiesSent={props.card.utilitiesSent} citySub={props.card.citySub} />\n          <SqftGroup garage={props.card.garageSf} covered={props.card.coveredAreaSf} />\n          <LotGroup lotSize={'null'} parcel={props.card.parcelNumber} />\n        </motion.div>\n\n      </motion.div>\n    </div>\n  )\n}\n\n\n\n\nfunction TestButton({ fetchData, anotherVal }) {\n\n\n  const [test, setTest] = useState(false);\n  const [testVal, setTestVal] = useState(\"This is rand test\")\n\n\n\n  async function handleChange() {\n    setTest(!test)\n    if (test) {\n      setTestVal(await testFunc())\n      // console.log(houseData)\n    } else {\n      setTestVal(\"This is rand test\")\n    }\n  }\n\n  return (\n    <div>\n      <button className='test-button' onClick={handleChange}>This is a test</button>\n      <p style={{ color: \"white\" }}>{testVal}</p>\n      <p></p>\n    </div>\n\n  );\n}\n\nconst testFunc = async () => {\n  const req = await fetch(\"/.netlify/functions/puller\", {\n    method:'POST',\n    body: JSON.stringify({url: 'https://infinity-scraper-files.s3.us-east-2.amazonaws.com//tmp/houses.json'})\n  })\n  const res = await req.text()\n  return res\n}\n\nconst testFetchFunc = async () => {\n  const res = await finalFetch()\n  return res\n}\n\nfunction App() {\n\n  const [index, setIndex] = useState(false);\n  const [homes, setHomes] = useState([]);\n  const [forceState, setForceState] = useState(false)\n\n  const fetchData = async () => {\n    const results = await axios.get(\"/.netlify/functions/hello\")\n    let formResults = JSON.parse(results.data.message)\n    return formResults\n\n  }\n\n  // const fetchHouses = async () => {\n  //   const houseResults = await axios.get(\"/.netlify/functions/puller\")\n  //   let newHouseResults = JSON.stringify(houseResults)\n  //   console.log(newHouseResults)\n  // }\n\n  // useEffect(() => {\n  //   fetchHouses()\n  // }, [])\n\n  // useEffect(() => {\n  //   async function grabData() {\n  //     const json = await finalFetch()\n  //     console.log(await finalFetch())\n  //     setHomes(json)\n  //   }\n  //   grabData();\n  // }, [setHomes]);\n\n  \n  \n  // useEffect(() => {\n  //   finalFetch()\n  //     .then((houseData) => {\n  //       setHomes(houseData)\n  //       console.log(houseData)\n  //     })\n  // }, [setHomes]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const req = await finalFetch()\n      setHomes(req)\n    }\n    fetchData();\n  }, [setHomes])\n\n\n  function handleForce() {\n    setForceState(!forceState)\n  }\n\n  // setTimeout(setHomes(finalFetch), 3000)\n\n\n\n  return (\n    <AnimateSharedLayout type=\"crossfade\">\n      {/* <TestButton fetchData={fetchData} anotherVal={homes}></TestButton> */}\n      {/* <button onClick={handleForce}></button> */}\n      {homes.length > 0 ? <CardList items={homes} setHomes={setHomes} setIndex={setIndex} /> : setTimeout(() => handleForce(), 1000)}\n      <AnimatePresence>\n        {index !== false && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            key='modal'\n            className='modal'\n            onClick={() => setIndex(false)}\n          >\n          </motion.div>\n        )}\n\n        {index !== false && (\n          <ExpandedCard\n            key='expandedCard'\n            index={index}\n            card={homes[index]}\n            setIndex={setIndex}\n            onClick={() => setIndex(false)}\n          >\n          </ExpandedCard>\n        )}\n      </AnimatePresence>\n    </AnimateSharedLayout>\n\n  );\n}\n\n\n// const content = ['this is a test', 'this is another test', 'another testing thing', 'yet another testing thing', 'Lorem enim proident adipisicing sunt aute esse qui aliqua est tempor minim elit exercitation incididunt.', 'lorem12Sit sint excepteur in sint dolor mollit duis ea magna culpa.'];\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n// import homes from './dataClean';\r\n// import TestAlgo from './TestAlgo';\r\n// import {PythonShell} from 'python-shell';\r\n\r\n// let {PythonShell} = require('python-shell');\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}